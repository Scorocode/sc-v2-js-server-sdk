/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.sc_broker_node_api.Archive', null, global);
goog.exportSymbol('proto.sc_broker_node_api.Cron', null, global);
goog.exportSymbol('proto.sc_broker_node_api.CronItem', null, global);
goog.exportSymbol('proto.sc_broker_node_api.FileInfo', null, global);
goog.exportSymbol('proto.sc_broker_node_api.FolderInfo', null, global);
goog.exportSymbol('proto.sc_broker_node_api.Process', null, global);
goog.exportSymbol('proto.sc_broker_node_api.ProcessInfo', null, global);
goog.exportSymbol('proto.sc_broker_node_api.ProcessInfo.State', null, global);
goog.exportSymbol('proto.sc_broker_node_api.ProcessInfo.Type', null, global);
goog.exportSymbol('proto.sc_broker_node_api.ProcessList', null, global);
goog.exportSymbol('proto.sc_broker_node_api.ProcessSelect', null, global);
goog.exportSymbol('proto.sc_broker_node_api.RenameRequest', null, global);
goog.exportSymbol('proto.sc_broker_node_api.Replica', null, global);
goog.exportSymbol('proto.sc_broker_node_api.Script', null, global);
goog.exportSymbol('proto.sc_broker_node_api.SelectRequest', null, global);
goog.exportSymbol('proto.sc_broker_node_api.Timer', null, global);
goog.exportSymbol('proto.sc_broker_node_api.Timer.Repeat', null, global);
goog.exportSymbol('proto.sc_broker_node_api.Timer.Repeat.Custom', null, global);
goog.exportSymbol('proto.sc_broker_node_api.Timer.Repeat.Daily', null, global);
goog.exportSymbol('proto.sc_broker_node_api.Timer.Repeat.Monthly', null, global);
goog.exportSymbol('proto.sc_broker_node_api.Timer.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.Timer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.Timer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.Timer.displayName = 'proto.sc_broker_node_api.Timer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.Timer.Repeat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.Timer.Repeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.Timer.Repeat.displayName = 'proto.sc_broker_node_api.Timer.Repeat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.Timer.Repeat.Custom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.Timer.Repeat.Custom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.Timer.Repeat.Custom.displayName = 'proto.sc_broker_node_api.Timer.Repeat.Custom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.Timer.Repeat.Daily = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_broker_node_api.Timer.Repeat.Daily.repeatedFields_, null);
};
goog.inherits(proto.sc_broker_node_api.Timer.Repeat.Daily, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.Timer.Repeat.Daily.displayName = 'proto.sc_broker_node_api.Timer.Repeat.Daily';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_broker_node_api.Timer.Repeat.Monthly.repeatedFields_, null);
};
goog.inherits(proto.sc_broker_node_api.Timer.Repeat.Monthly, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.Timer.Repeat.Monthly.displayName = 'proto.sc_broker_node_api.Timer.Repeat.Monthly';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.RenameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.RenameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.RenameRequest.displayName = 'proto.sc_broker_node_api.RenameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.SelectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.SelectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.SelectRequest.displayName = 'proto.sc_broker_node_api.SelectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.FolderInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_broker_node_api.FolderInfo.repeatedFields_, null);
};
goog.inherits(proto.sc_broker_node_api.FolderInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.FolderInfo.displayName = 'proto.sc_broker_node_api.FolderInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.FileInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.FileInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.FileInfo.displayName = 'proto.sc_broker_node_api.FileInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.Script = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.Script, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.Script.displayName = 'proto.sc_broker_node_api.Script';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.Cron = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_broker_node_api.Cron.repeatedFields_, null);
};
goog.inherits(proto.sc_broker_node_api.Cron, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.Cron.displayName = 'proto.sc_broker_node_api.Cron';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.CronItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.CronItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.CronItem.displayName = 'proto.sc_broker_node_api.CronItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.Process = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.Process, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.Process.displayName = 'proto.sc_broker_node_api.Process';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.ProcessSelect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.ProcessSelect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.ProcessSelect.displayName = 'proto.sc_broker_node_api.ProcessSelect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.ProcessInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.ProcessInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.ProcessInfo.displayName = 'proto.sc_broker_node_api.ProcessInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.ProcessList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_broker_node_api.ProcessList.repeatedFields_, null);
};
goog.inherits(proto.sc_broker_node_api.ProcessList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.ProcessList.displayName = 'proto.sc_broker_node_api.ProcessList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.Replica = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.Replica, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.Replica.displayName = 'proto.sc_broker_node_api.Replica';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_broker_node_api.Archive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_broker_node_api.Archive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_broker_node_api.Archive.displayName = 'proto.sc_broker_node_api.Archive';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.Timer.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.Timer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.Timer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Timer.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    active: jspb.Message.getFieldWithDefault(msg, 2, false),
    start: jspb.Message.getFieldWithDefault(msg, 3, 0),
    next: jspb.Message.getFieldWithDefault(msg, 4, 0),
    repeat: (f = msg.getRepeat()) && proto.sc_broker_node_api.Timer.Repeat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.Timer}
 */
proto.sc_broker_node_api.Timer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.Timer;
  return proto.sc_broker_node_api.Timer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.Timer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.Timer}
 */
proto.sc_broker_node_api.Timer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sc_broker_node_api.Timer.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStart(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNext(value);
      break;
    case 5:
      var value = new proto.sc_broker_node_api.Timer.Repeat;
      reader.readMessage(value,proto.sc_broker_node_api.Timer.Repeat.deserializeBinaryFromReader);
      msg.setRepeat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Timer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.Timer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.Timer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Timer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNext();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getRepeat();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sc_broker_node_api.Timer.Repeat.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.sc_broker_node_api.Timer.Type = {
  ONCE: 0,
  CUSTOM: 1,
  DAILY: 2,
  MONTHLY: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.Timer.Repeat.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.Timer.Repeat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.Timer.Repeat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Timer.Repeat.toObject = function(includeInstance, msg) {
  var f, obj = {
    custom: (f = msg.getCustom()) && proto.sc_broker_node_api.Timer.Repeat.Custom.toObject(includeInstance, f),
    daily: (f = msg.getDaily()) && proto.sc_broker_node_api.Timer.Repeat.Daily.toObject(includeInstance, f),
    monthly: (f = msg.getMonthly()) && proto.sc_broker_node_api.Timer.Repeat.Monthly.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.Timer.Repeat}
 */
proto.sc_broker_node_api.Timer.Repeat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.Timer.Repeat;
  return proto.sc_broker_node_api.Timer.Repeat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.Timer.Repeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.Timer.Repeat}
 */
proto.sc_broker_node_api.Timer.Repeat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc_broker_node_api.Timer.Repeat.Custom;
      reader.readMessage(value,proto.sc_broker_node_api.Timer.Repeat.Custom.deserializeBinaryFromReader);
      msg.setCustom(value);
      break;
    case 2:
      var value = new proto.sc_broker_node_api.Timer.Repeat.Daily;
      reader.readMessage(value,proto.sc_broker_node_api.Timer.Repeat.Daily.deserializeBinaryFromReader);
      msg.setDaily(value);
      break;
    case 3:
      var value = new proto.sc_broker_node_api.Timer.Repeat.Monthly;
      reader.readMessage(value,proto.sc_broker_node_api.Timer.Repeat.Monthly.deserializeBinaryFromReader);
      msg.setMonthly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Timer.Repeat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.Timer.Repeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.Timer.Repeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Timer.Repeat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCustom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.sc_broker_node_api.Timer.Repeat.Custom.serializeBinaryToWriter
    );
  }
  f = message.getDaily();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sc_broker_node_api.Timer.Repeat.Daily.serializeBinaryToWriter
    );
  }
  f = message.getMonthly();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sc_broker_node_api.Timer.Repeat.Monthly.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.Timer.Repeat.Custom.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.Timer.Repeat.Custom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.Timer.Repeat.Custom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Timer.Repeat.Custom.toObject = function(includeInstance, msg) {
  var f, obj = {
    minutes: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.Timer.Repeat.Custom}
 */
proto.sc_broker_node_api.Timer.Repeat.Custom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.Timer.Repeat.Custom;
  return proto.sc_broker_node_api.Timer.Repeat.Custom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.Timer.Repeat.Custom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.Timer.Repeat.Custom}
 */
proto.sc_broker_node_api.Timer.Repeat.Custom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Timer.Repeat.Custom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.Timer.Repeat.Custom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.Timer.Repeat.Custom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Timer.Repeat.Custom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinutes();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 minutes = 3;
 * @return {number}
 */
proto.sc_broker_node_api.Timer.Repeat.Custom.prototype.getMinutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.Timer.Repeat.Custom.prototype.setMinutes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_broker_node_api.Timer.Repeat.Daily.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.Timer.Repeat.Daily.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.Timer.Repeat.Daily.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.Timer.Repeat.Daily} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Timer.Repeat.Daily.toObject = function(includeInstance, msg) {
  var f, obj = {
    daysList: jspb.Message.getRepeatedField(msg, 1),
    minutes: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.Timer.Repeat.Daily}
 */
proto.sc_broker_node_api.Timer.Repeat.Daily.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.Timer.Repeat.Daily;
  return proto.sc_broker_node_api.Timer.Repeat.Daily.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.Timer.Repeat.Daily} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.Timer.Repeat.Daily}
 */
proto.sc_broker_node_api.Timer.Repeat.Daily.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setDaysList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Timer.Repeat.Daily.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.Timer.Repeat.Daily.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.Timer.Repeat.Daily} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Timer.Repeat.Daily.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDaysList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getMinutes();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * repeated uint32 days = 1;
 * @return {!Array<number>}
 */
proto.sc_broker_node_api.Timer.Repeat.Daily.prototype.getDaysList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.sc_broker_node_api.Timer.Repeat.Daily.prototype.setDaysList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.sc_broker_node_api.Timer.Repeat.Daily.prototype.addDays = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.sc_broker_node_api.Timer.Repeat.Daily.prototype.clearDaysList = function() {
  this.setDaysList([]);
};


/**
 * optional uint32 minutes = 3;
 * @return {number}
 */
proto.sc_broker_node_api.Timer.Repeat.Daily.prototype.getMinutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.Timer.Repeat.Daily.prototype.setMinutes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.Timer.Repeat.Monthly.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.Timer.Repeat.Monthly} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.toObject = function(includeInstance, msg) {
  var f, obj = {
    monthsList: jspb.Message.getRepeatedField(msg, 1),
    daysList: jspb.Message.getRepeatedField(msg, 2),
    lastDate: jspb.Message.getFieldWithDefault(msg, 3, false),
    minutes: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.Timer.Repeat.Monthly}
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.Timer.Repeat.Monthly;
  return proto.sc_broker_node_api.Timer.Repeat.Monthly.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.Timer.Repeat.Monthly} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.Timer.Repeat.Monthly}
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setMonthsList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setDaysList(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLastDate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinutes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.Timer.Repeat.Monthly.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.Timer.Repeat.Monthly} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonthsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getDaysList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getLastDate();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getMinutes();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * repeated uint32 months = 1;
 * @return {!Array<number>}
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.getMonthsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.setMonthsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.addMonths = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.clearMonthsList = function() {
  this.setMonthsList([]);
};


/**
 * repeated uint32 days = 2;
 * @return {!Array<number>}
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.getDaysList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.setDaysList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.addDays = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.clearDaysList = function() {
  this.setDaysList([]);
};


/**
 * optional bool last_date = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.getLastDate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.setLastDate = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 minutes = 5;
 * @return {number}
 */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.getMinutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.Timer.Repeat.Monthly.prototype.setMinutes = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Custom custom = 1;
 * @return {?proto.sc_broker_node_api.Timer.Repeat.Custom}
 */
proto.sc_broker_node_api.Timer.Repeat.prototype.getCustom = function() {
  return /** @type{?proto.sc_broker_node_api.Timer.Repeat.Custom} */ (
    jspb.Message.getWrapperField(this, proto.sc_broker_node_api.Timer.Repeat.Custom, 1));
};


/** @param {?proto.sc_broker_node_api.Timer.Repeat.Custom|undefined} value */
proto.sc_broker_node_api.Timer.Repeat.prototype.setCustom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.sc_broker_node_api.Timer.Repeat.prototype.clearCustom = function() {
  this.setCustom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sc_broker_node_api.Timer.Repeat.prototype.hasCustom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Daily daily = 2;
 * @return {?proto.sc_broker_node_api.Timer.Repeat.Daily}
 */
proto.sc_broker_node_api.Timer.Repeat.prototype.getDaily = function() {
  return /** @type{?proto.sc_broker_node_api.Timer.Repeat.Daily} */ (
    jspb.Message.getWrapperField(this, proto.sc_broker_node_api.Timer.Repeat.Daily, 2));
};


/** @param {?proto.sc_broker_node_api.Timer.Repeat.Daily|undefined} value */
proto.sc_broker_node_api.Timer.Repeat.prototype.setDaily = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.sc_broker_node_api.Timer.Repeat.prototype.clearDaily = function() {
  this.setDaily(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sc_broker_node_api.Timer.Repeat.prototype.hasDaily = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Monthly monthly = 3;
 * @return {?proto.sc_broker_node_api.Timer.Repeat.Monthly}
 */
proto.sc_broker_node_api.Timer.Repeat.prototype.getMonthly = function() {
  return /** @type{?proto.sc_broker_node_api.Timer.Repeat.Monthly} */ (
    jspb.Message.getWrapperField(this, proto.sc_broker_node_api.Timer.Repeat.Monthly, 3));
};


/** @param {?proto.sc_broker_node_api.Timer.Repeat.Monthly|undefined} value */
proto.sc_broker_node_api.Timer.Repeat.prototype.setMonthly = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.sc_broker_node_api.Timer.Repeat.prototype.clearMonthly = function() {
  this.setMonthly(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sc_broker_node_api.Timer.Repeat.prototype.hasMonthly = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Type type = 1;
 * @return {!proto.sc_broker_node_api.Timer.Type}
 */
proto.sc_broker_node_api.Timer.prototype.getType = function() {
  return /** @type {!proto.sc_broker_node_api.Timer.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.sc_broker_node_api.Timer.Type} value */
proto.sc_broker_node_api.Timer.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bool active = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_broker_node_api.Timer.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.sc_broker_node_api.Timer.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 start = 3;
 * @return {number}
 */
proto.sc_broker_node_api.Timer.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.Timer.prototype.setStart = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 next = 4;
 * @return {number}
 */
proto.sc_broker_node_api.Timer.prototype.getNext = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.Timer.prototype.setNext = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Repeat repeat = 5;
 * @return {?proto.sc_broker_node_api.Timer.Repeat}
 */
proto.sc_broker_node_api.Timer.prototype.getRepeat = function() {
  return /** @type{?proto.sc_broker_node_api.Timer.Repeat} */ (
    jspb.Message.getWrapperField(this, proto.sc_broker_node_api.Timer.Repeat, 5));
};


/** @param {?proto.sc_broker_node_api.Timer.Repeat|undefined} value */
proto.sc_broker_node_api.Timer.prototype.setRepeat = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.sc_broker_node_api.Timer.prototype.clearRepeat = function() {
  this.setRepeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sc_broker_node_api.Timer.prototype.hasRepeat = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.RenameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.RenameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.RenameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.RenameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newPath: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.RenameRequest}
 */
proto.sc_broker_node_api.RenameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.RenameRequest;
  return proto.sc_broker_node_api.RenameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.RenameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.RenameRequest}
 */
proto.sc_broker_node_api.RenameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.RenameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.RenameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.RenameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.RenameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.sc_broker_node_api.RenameRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.RenameRequest.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_path = 2;
 * @return {string}
 */
proto.sc_broker_node_api.RenameRequest.prototype.getNewPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.RenameRequest.prototype.setNewPath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.SelectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.SelectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.SelectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.SelectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.SelectRequest}
 */
proto.sc_broker_node_api.SelectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.SelectRequest;
  return proto.sc_broker_node_api.SelectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.SelectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.SelectRequest}
 */
proto.sc_broker_node_api.SelectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.SelectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.SelectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.SelectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.SelectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.sc_broker_node_api.SelectRequest.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.SelectRequest.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_broker_node_api.FolderInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.FolderInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.FolderInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.FolderInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.FolderInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filesInfoList: jspb.Message.toObjectList(msg.getFilesInfoList(),
    proto.sc_broker_node_api.FileInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.FolderInfo}
 */
proto.sc_broker_node_api.FolderInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.FolderInfo;
  return proto.sc_broker_node_api.FolderInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.FolderInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.FolderInfo}
 */
proto.sc_broker_node_api.FolderInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = new proto.sc_broker_node_api.FileInfo;
      reader.readMessage(value,proto.sc_broker_node_api.FileInfo.deserializeBinaryFromReader);
      msg.addFilesInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.FolderInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.FolderInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.FolderInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.FolderInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilesInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sc_broker_node_api.FileInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.sc_broker_node_api.FolderInfo.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.FolderInfo.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated FileInfo files_info = 2;
 * @return {!Array<!proto.sc_broker_node_api.FileInfo>}
 */
proto.sc_broker_node_api.FolderInfo.prototype.getFilesInfoList = function() {
  return /** @type{!Array<!proto.sc_broker_node_api.FileInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_broker_node_api.FileInfo, 2));
};


/** @param {!Array<!proto.sc_broker_node_api.FileInfo>} value */
proto.sc_broker_node_api.FolderInfo.prototype.setFilesInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sc_broker_node_api.FileInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_broker_node_api.FileInfo}
 */
proto.sc_broker_node_api.FolderInfo.prototype.addFilesInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sc_broker_node_api.FileInfo, opt_index);
};


proto.sc_broker_node_api.FolderInfo.prototype.clearFilesInfoList = function() {
  this.setFilesInfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.FileInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.FileInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.FileInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.FileInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    isDir: jspb.Message.getFieldWithDefault(msg, 1, false),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mimetype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    size: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.FileInfo}
 */
proto.sc_broker_node_api.FileInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.FileInfo;
  return proto.sc_broker_node_api.FileInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.FileInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.FileInfo}
 */
proto.sc_broker_node_api.FileInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDir(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimetype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.FileInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.FileInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.FileInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.FileInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsDir();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMimetype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional bool is_dir = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_broker_node_api.FileInfo.prototype.getIsDir = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sc_broker_node_api.FileInfo.prototype.setIsDir = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.sc_broker_node_api.FileInfo.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.FileInfo.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mimetype = 3;
 * @return {string}
 */
proto.sc_broker_node_api.FileInfo.prototype.getMimetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.FileInfo.prototype.setMimetype = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 size = 4;
 * @return {number}
 */
proto.sc_broker_node_api.FileInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.FileInfo.prototype.setSize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.Script.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.Script.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.Script} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Script.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.Script}
 */
proto.sc_broker_node_api.Script.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.Script;
  return proto.sc_broker_node_api.Script.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.Script} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.Script}
 */
proto.sc_broker_node_api.Script.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Script.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.Script.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.Script} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Script.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.sc_broker_node_api.Script.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.Script.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.sc_broker_node_api.Script.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.Script.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_broker_node_api.Cron.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.Cron.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.Cron.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.Cron} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Cron.toObject = function(includeInstance, msg) {
  var f, obj = {
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.sc_broker_node_api.CronItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.Cron}
 */
proto.sc_broker_node_api.Cron.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.Cron;
  return proto.sc_broker_node_api.Cron.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.Cron} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.Cron}
 */
proto.sc_broker_node_api.Cron.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc_broker_node_api.CronItem;
      reader.readMessage(value,proto.sc_broker_node_api.CronItem.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Cron.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.Cron.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.Cron} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Cron.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc_broker_node_api.CronItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CronItem rules = 1;
 * @return {!Array<!proto.sc_broker_node_api.CronItem>}
 */
proto.sc_broker_node_api.Cron.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.sc_broker_node_api.CronItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_broker_node_api.CronItem, 1));
};


/** @param {!Array<!proto.sc_broker_node_api.CronItem>} value */
proto.sc_broker_node_api.Cron.prototype.setRulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sc_broker_node_api.CronItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_broker_node_api.CronItem}
 */
proto.sc_broker_node_api.Cron.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sc_broker_node_api.CronItem, opt_index);
};


proto.sc_broker_node_api.Cron.prototype.clearRulesList = function() {
  this.setRulesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.CronItem.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.CronItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.CronItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.CronItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timer: (f = msg.getTimer()) && proto.sc_broker_node_api.Timer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.CronItem}
 */
proto.sc_broker_node_api.CronItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.CronItem;
  return proto.sc_broker_node_api.CronItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.CronItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.CronItem}
 */
proto.sc_broker_node_api.CronItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = new proto.sc_broker_node_api.Timer;
      reader.readMessage(value,proto.sc_broker_node_api.Timer.deserializeBinaryFromReader);
      msg.setTimer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.CronItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.CronItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.CronItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.CronItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sc_broker_node_api.Timer.serializeBinaryToWriter
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.sc_broker_node_api.CronItem.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.CronItem.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Timer timer = 2;
 * @return {?proto.sc_broker_node_api.Timer}
 */
proto.sc_broker_node_api.CronItem.prototype.getTimer = function() {
  return /** @type{?proto.sc_broker_node_api.Timer} */ (
    jspb.Message.getWrapperField(this, proto.sc_broker_node_api.Timer, 2));
};


/** @param {?proto.sc_broker_node_api.Timer|undefined} value */
proto.sc_broker_node_api.CronItem.prototype.setTimer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.sc_broker_node_api.CronItem.prototype.clearTimer = function() {
  this.setTimer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sc_broker_node_api.CronItem.prototype.hasTimer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.Process.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.Process.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.Process} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Process.toObject = function(includeInstance, msg) {
  var f, obj = {
    replica: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    path: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.Process}
 */
proto.sc_broker_node_api.Process.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.Process;
  return proto.sc_broker_node_api.Process.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.Process} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.Process}
 */
proto.sc_broker_node_api.Process.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplica(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Process.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.Process.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.Process} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Process.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplica();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string replica = 1;
 * @return {string}
 */
proto.sc_broker_node_api.Process.prototype.getReplica = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.Process.prototype.setReplica = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 pid = 2;
 * @return {number}
 */
proto.sc_broker_node_api.Process.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.Process.prototype.setPid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.sc_broker_node_api.Process.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.Process.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.ProcessSelect.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.ProcessSelect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.ProcessSelect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.ProcessSelect.toObject = function(includeInstance, msg) {
  var f, obj = {
    replica: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.ProcessSelect}
 */
proto.sc_broker_node_api.ProcessSelect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.ProcessSelect;
  return proto.sc_broker_node_api.ProcessSelect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.ProcessSelect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.ProcessSelect}
 */
proto.sc_broker_node_api.ProcessSelect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplica(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.ProcessSelect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.ProcessSelect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.ProcessSelect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.ProcessSelect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplica();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string replica = 1;
 * @return {string}
 */
proto.sc_broker_node_api.ProcessSelect.prototype.getReplica = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.ProcessSelect.prototype.setReplica = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 pid = 2;
 * @return {number}
 */
proto.sc_broker_node_api.ProcessSelect.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.ProcessSelect.prototype.setPid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.ProcessInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.ProcessInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.ProcessInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.ProcessInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    replica: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    path: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    memory: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cpu: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0),
    type: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.ProcessInfo}
 */
proto.sc_broker_node_api.ProcessInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.ProcessInfo;
  return proto.sc_broker_node_api.ProcessInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.ProcessInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.ProcessInfo}
 */
proto.sc_broker_node_api.ProcessInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplica(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemory(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCpu(value);
      break;
    case 7:
      var value = /** @type {!proto.sc_broker_node_api.ProcessInfo.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 8:
      var value = /** @type {!proto.sc_broker_node_api.ProcessInfo.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.ProcessInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.ProcessInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.ProcessInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.ProcessInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplica();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMemory();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getCpu();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sc_broker_node_api.ProcessInfo.State = {
  STOP: 0,
  RUN: 1
};

/**
 * @enum {number}
 */
proto.sc_broker_node_api.ProcessInfo.Type = {
  WEBSERVER: 0,
  CRON: 1
};

/**
 * optional string replica = 1;
 * @return {string}
 */
proto.sc_broker_node_api.ProcessInfo.prototype.getReplica = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.ProcessInfo.prototype.setReplica = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 pid = 2;
 * @return {number}
 */
proto.sc_broker_node_api.ProcessInfo.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.ProcessInfo.prototype.setPid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string path = 3;
 * @return {string}
 */
proto.sc_broker_node_api.ProcessInfo.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.ProcessInfo.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 created_at = 4;
 * @return {number}
 */
proto.sc_broker_node_api.ProcessInfo.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.ProcessInfo.prototype.setCreatedAt = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 memory = 5;
 * @return {number}
 */
proto.sc_broker_node_api.ProcessInfo.prototype.getMemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.sc_broker_node_api.ProcessInfo.prototype.setMemory = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional double cpu = 6;
 * @return {number}
 */
proto.sc_broker_node_api.ProcessInfo.prototype.getCpu = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.sc_broker_node_api.ProcessInfo.prototype.setCpu = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional State state = 7;
 * @return {!proto.sc_broker_node_api.ProcessInfo.State}
 */
proto.sc_broker_node_api.ProcessInfo.prototype.getState = function() {
  return /** @type {!proto.sc_broker_node_api.ProcessInfo.State} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.sc_broker_node_api.ProcessInfo.State} value */
proto.sc_broker_node_api.ProcessInfo.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional Type type = 8;
 * @return {!proto.sc_broker_node_api.ProcessInfo.Type}
 */
proto.sc_broker_node_api.ProcessInfo.prototype.getType = function() {
  return /** @type {!proto.sc_broker_node_api.ProcessInfo.Type} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.sc_broker_node_api.ProcessInfo.Type} value */
proto.sc_broker_node_api.ProcessInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_broker_node_api.ProcessList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.ProcessList.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.ProcessList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.ProcessList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.ProcessList.toObject = function(includeInstance, msg) {
  var f, obj = {
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.sc_broker_node_api.ProcessInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.ProcessList}
 */
proto.sc_broker_node_api.ProcessList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.ProcessList;
  return proto.sc_broker_node_api.ProcessList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.ProcessList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.ProcessList}
 */
proto.sc_broker_node_api.ProcessList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc_broker_node_api.ProcessInfo;
      reader.readMessage(value,proto.sc_broker_node_api.ProcessInfo.deserializeBinaryFromReader);
      msg.addList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.ProcessList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.ProcessList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.ProcessList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.ProcessList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc_broker_node_api.ProcessInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProcessInfo list = 1;
 * @return {!Array<!proto.sc_broker_node_api.ProcessInfo>}
 */
proto.sc_broker_node_api.ProcessList.prototype.getListList = function() {
  return /** @type{!Array<!proto.sc_broker_node_api.ProcessInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_broker_node_api.ProcessInfo, 1));
};


/** @param {!Array<!proto.sc_broker_node_api.ProcessInfo>} value */
proto.sc_broker_node_api.ProcessList.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sc_broker_node_api.ProcessInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_broker_node_api.ProcessInfo}
 */
proto.sc_broker_node_api.ProcessList.prototype.addList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sc_broker_node_api.ProcessInfo, opt_index);
};


proto.sc_broker_node_api.ProcessList.prototype.clearListList = function() {
  this.setListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.Replica.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.Replica.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.Replica} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Replica.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    appName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    goVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    buildDate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    commit: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.Replica}
 */
proto.sc_broker_node_api.Replica.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.Replica;
  return proto.sc_broker_node_api.Replica.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.Replica} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.Replica}
 */
proto.sc_broker_node_api.Replica.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildDate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Replica.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.Replica.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.Replica} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Replica.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAppName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGoVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBuildDate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCommit();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sc_broker_node_api.Replica.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.Replica.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string app_name = 2;
 * @return {string}
 */
proto.sc_broker_node_api.Replica.prototype.getAppName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.Replica.prototype.setAppName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.sc_broker_node_api.Replica.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.Replica.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string go_version = 4;
 * @return {string}
 */
proto.sc_broker_node_api.Replica.prototype.getGoVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.Replica.prototype.setGoVersion = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string build_date = 5;
 * @return {string}
 */
proto.sc_broker_node_api.Replica.prototype.getBuildDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.Replica.prototype.setBuildDate = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string commit = 6;
 * @return {string}
 */
proto.sc_broker_node_api.Replica.prototype.getCommit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.sc_broker_node_api.Replica.prototype.setCommit = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_broker_node_api.Archive.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_broker_node_api.Archive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_broker_node_api.Archive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Archive.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_broker_node_api.Archive}
 */
proto.sc_broker_node_api.Archive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_broker_node_api.Archive;
  return proto.sc_broker_node_api.Archive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_broker_node_api.Archive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_broker_node_api.Archive}
 */
proto.sc_broker_node_api.Archive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Archive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_broker_node_api.Archive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_broker_node_api.Archive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_broker_node_api.Archive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes body = 1;
 * @return {!(string|Uint8Array)}
 */
proto.sc_broker_node_api.Archive.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.sc_broker_node_api.Archive.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.sc_broker_node_api.Archive.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.sc_broker_node_api.Archive.prototype.setBody = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.sc_broker_node_api);
