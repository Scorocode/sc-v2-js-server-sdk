/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

// require('../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
var base_base_pb = require('../base/base_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.sc_auth.AclAction', null, global);
goog.exportSymbol('proto.sc_auth.AclActionType', null, global);
goog.exportSymbol('proto.sc_auth.AclActionTypesList', null, global);
goog.exportSymbol('proto.sc_auth.AclActionTypesListRequest', null, global);
goog.exportSymbol('proto.sc_auth.AclActionsList', null, global);
goog.exportSymbol('proto.sc_auth.AclActionsListRequest', null, global);
goog.exportSymbol('proto.sc_auth.AclField', null, global);
goog.exportSymbol('proto.sc_auth.AclFieldsList', null, global);
goog.exportSymbol('proto.sc_auth.AclFieldsListRequest', null, global);
goog.exportSymbol('proto.sc_auth.AclObject', null, global);
goog.exportSymbol('proto.sc_auth.AclObjectsArray', null, global);
goog.exportSymbol('proto.sc_auth.AclObjectsByRole', null, global);
goog.exportSymbol('proto.sc_auth.AclObjectsList', null, global);
goog.exportSymbol('proto.sc_auth.AclObjectsListRequest', null, global);
goog.exportSymbol('proto.sc_auth.AclType', null, global);
goog.exportSymbol('proto.sc_auth.AclTypeFilter', null, global);
goog.exportSymbol('proto.sc_auth.AllRolesList', null, global);
goog.exportSymbol('proto.sc_auth.BoolFilter', null, global);
goog.exportSymbol('proto.sc_auth.GetAclsByRolesArrayResponse', null, global);
goog.exportSymbol('proto.sc_auth.GetAclsByRolesRequest', null, global);
goog.exportSymbol('proto.sc_auth.GetAclsByRolesResponse', null, global);
goog.exportSymbol('proto.sc_auth.IdNameObj', null, global);
goog.exportSymbol('proto.sc_auth.OrderField', null, global);
goog.exportSymbol('proto.sc_auth.Role', null, global);
goog.exportSymbol('proto.sc_auth.RolesList', null, global);
goog.exportSymbol('proto.sc_auth.RolesListRequest', null, global);
goog.exportSymbol('proto.sc_auth.Settings', null, global);
goog.exportSymbol('proto.sc_auth.User', null, global);
goog.exportSymbol('proto.sc_auth.UserEmailAndPasswordRequest', null, global);
goog.exportSymbol('proto.sc_auth.UserSelectRequest', null, global);
goog.exportSymbol('proto.sc_auth.UsersList', null, global);
goog.exportSymbol('proto.sc_auth.UsersListRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.Settings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_auth.Settings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.Settings.displayName = 'proto.sc_auth.Settings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.Settings.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.Settings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.Settings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.Settings.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.Settings}
 */
proto.sc_auth.Settings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.Settings;
  return proto.sc_auth.Settings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.Settings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.Settings}
 */
proto.sc_auth.Settings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.Settings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.Settings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.Settings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.Settings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.sc_auth.Settings.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.sc_auth.Settings.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.sc_auth.Settings.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.sc_auth.Settings.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.UserEmailAndPasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.UserEmailAndPasswordRequest.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.UserEmailAndPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.UserEmailAndPasswordRequest.displayName = 'proto.sc_auth.UserEmailAndPasswordRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.UserEmailAndPasswordRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.UserEmailAndPasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.UserEmailAndPasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.UserEmailAndPasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.UserEmailAndPasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rolesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.UserEmailAndPasswordRequest}
 */
proto.sc_auth.UserEmailAndPasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.UserEmailAndPasswordRequest;
  return proto.sc_auth.UserEmailAndPasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.UserEmailAndPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.UserEmailAndPasswordRequest}
 */
proto.sc_auth.UserEmailAndPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.UserEmailAndPasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.UserEmailAndPasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.UserEmailAndPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.UserEmailAndPasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.sc_auth.UserEmailAndPasswordRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_auth.UserEmailAndPasswordRequest.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.sc_auth.UserEmailAndPasswordRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_auth.UserEmailAndPasswordRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string roles = 3;
 * @return {!Array<string>}
 */
proto.sc_auth.UserEmailAndPasswordRequest.prototype.getRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.sc_auth.UserEmailAndPasswordRequest.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.sc_auth.UserEmailAndPasswordRequest.prototype.addRoles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.sc_auth.UserEmailAndPasswordRequest.prototype.clearRolesList = function() {
  this.setRolesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.BoolFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_auth.BoolFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.BoolFilter.displayName = 'proto.sc_auth.BoolFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.BoolFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.BoolFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.BoolFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.BoolFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    flag: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.BoolFilter}
 */
proto.sc_auth.BoolFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.BoolFilter;
  return proto.sc_auth.BoolFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.BoolFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.BoolFilter}
 */
proto.sc_auth.BoolFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFlag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.BoolFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.BoolFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.BoolFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.BoolFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlag();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool flag = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_auth.BoolFilter.prototype.getFlag = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.sc_auth.BoolFilter.prototype.setFlag = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.User.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.User.displayName = 'proto.sc_auth.User';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.User.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.User.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: msg.getPassword_asB64(),
    blocked: jspb.Message.getFieldWithDefault(msg, 4, false),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    error: (f = msg.getError()) && base_base_pb.Error.toObject(includeInstance, f),
    rolesList: jspb.Message.getRepeatedField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.User}
 */
proto.sc_auth.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.User;
  return proto.sc_auth.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.User}
 */
proto.sc_auth.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlocked(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 7:
      var value = new base_base_pb.Error;
      reader.readMessage(value,base_base_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBlocked();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      base_base_pb.Error.serializeBinaryToWriter
    );
  }
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sc_auth.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_auth.User.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.sc_auth.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_auth.User.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes password = 3;
 * @return {!(string|Uint8Array)}
 */
proto.sc_auth.User.prototype.getPassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes password = 3;
 * This is a type-conversion wrapper around `getPassword()`
 * @return {string}
 */
proto.sc_auth.User.prototype.getPassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPassword()));
};


/**
 * optional bytes password = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassword()`
 * @return {!Uint8Array}
 */
proto.sc_auth.User.prototype.getPassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPassword()));
};


/** @param {!(string|Uint8Array)} value */
proto.sc_auth.User.prototype.setPassword = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool blocked = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_auth.User.prototype.getBlocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.sc_auth.User.prototype.setBlocked = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sc_auth.User.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.sc_auth.User.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.sc_auth.User.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.User.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sc_auth.User.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.sc_auth.User.prototype.setUpdatedAt = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.sc_auth.User.prototype.clearUpdatedAt = function() {
  this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.User.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional base.Error error = 7;
 * @return {?proto.base.Error}
 */
proto.sc_auth.User.prototype.getError = function() {
  return /** @type{?proto.base.Error} */ (
    jspb.Message.getWrapperField(this, base_base_pb.Error, 7));
};


/** @param {?proto.base.Error|undefined} value */
proto.sc_auth.User.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.sc_auth.User.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.User.prototype.hasError = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated string roles = 8;
 * @return {!Array<string>}
 */
proto.sc_auth.User.prototype.getRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.sc_auth.User.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.sc_auth.User.prototype.addRoles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.sc_auth.User.prototype.clearRolesList = function() {
  this.setRolesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.UsersList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.UsersList.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.UsersList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.UsersList.displayName = 'proto.sc_auth.UsersList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.UsersList.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.UsersList.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.UsersList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.UsersList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.UsersList.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    total: jspb.Message.getFieldWithDefault(msg, 3, 0),
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.sc_auth.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.UsersList}
 */
proto.sc_auth.UsersList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.UsersList;
  return proto.sc_auth.UsersList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.UsersList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.UsersList}
 */
proto.sc_auth.UsersList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 4:
      var value = new proto.sc_auth.User;
      reader.readMessage(value,proto.sc_auth.User.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.UsersList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.UsersList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.UsersList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.UsersList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.sc_auth.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 page = 1;
 * @return {number}
 */
proto.sc_auth.UsersList.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.UsersList.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 pageSize = 2;
 * @return {number}
 */
proto.sc_auth.UsersList.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.UsersList.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 total = 3;
 * @return {number}
 */
proto.sc_auth.UsersList.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.UsersList.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated User items = 4;
 * @return {!Array<!proto.sc_auth.User>}
 */
proto.sc_auth.UsersList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.sc_auth.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.User, 4));
};


/** @param {!Array<!proto.sc_auth.User>} value */
proto.sc_auth.UsersList.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.sc_auth.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.User}
 */
proto.sc_auth.UsersList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.sc_auth.User, opt_index);
};


proto.sc_auth.UsersList.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.UserSelectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_auth.UserSelectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.UserSelectRequest.displayName = 'proto.sc_auth.UserSelectRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.UserSelectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.UserSelectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.UserSelectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.UserSelectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.UserSelectRequest}
 */
proto.sc_auth.UserSelectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.UserSelectRequest;
  return proto.sc_auth.UserSelectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.UserSelectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.UserSelectRequest}
 */
proto.sc_auth.UserSelectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.UserSelectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.UserSelectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.UserSelectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.UserSelectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.sc_auth.UserSelectRequest.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_auth.UserSelectRequest.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.GetAclsByRolesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.GetAclsByRolesRequest.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.GetAclsByRolesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.GetAclsByRolesRequest.displayName = 'proto.sc_auth.GetAclsByRolesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.GetAclsByRolesRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.GetAclsByRolesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.GetAclsByRolesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.GetAclsByRolesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.GetAclsByRolesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    rolesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.GetAclsByRolesRequest}
 */
proto.sc_auth.GetAclsByRolesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.GetAclsByRolesRequest;
  return proto.sc_auth.GetAclsByRolesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.GetAclsByRolesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.GetAclsByRolesRequest}
 */
proto.sc_auth.GetAclsByRolesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.GetAclsByRolesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.GetAclsByRolesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.GetAclsByRolesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.GetAclsByRolesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string roles = 1;
 * @return {!Array<string>}
 */
proto.sc_auth.GetAclsByRolesRequest.prototype.getRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.sc_auth.GetAclsByRolesRequest.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.sc_auth.GetAclsByRolesRequest.prototype.addRoles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.sc_auth.GetAclsByRolesRequest.prototype.clearRolesList = function() {
  this.setRolesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclObjectsListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclObjectsListRequest.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclObjectsListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclObjectsListRequest.displayName = 'proto.sc_auth.AclObjectsListRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclObjectsListRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclObjectsListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclObjectsListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclObjectsListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclObjectsListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.sc_auth.OrderField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclObjectsListRequest}
 */
proto.sc_auth.AclObjectsListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclObjectsListRequest;
  return proto.sc_auth.AclObjectsListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclObjectsListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclObjectsListRequest}
 */
proto.sc_auth.AclObjectsListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = new proto.sc_auth.OrderField;
      reader.readMessage(value,proto.sc_auth.OrderField.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclObjectsListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclObjectsListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclObjectsListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclObjectsListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.sc_auth.OrderField.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 page = 1;
 * @return {number}
 */
proto.sc_auth.AclObjectsListRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.AclObjectsListRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 pageSize = 2;
 * @return {number}
 */
proto.sc_auth.AclObjectsListRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.AclObjectsListRequest.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 id = 3;
 * @return {number}
 */
proto.sc_auth.AclObjectsListRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.AclObjectsListRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.sc_auth.AclObjectsListRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sc_auth.AclObjectsListRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated OrderField order = 5;
 * @return {!Array<!proto.sc_auth.OrderField>}
 */
proto.sc_auth.AclObjectsListRequest.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.sc_auth.OrderField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.OrderField, 5));
};


/** @param {!Array<!proto.sc_auth.OrderField>} value */
proto.sc_auth.AclObjectsListRequest.prototype.setOrderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.sc_auth.OrderField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.OrderField}
 */
proto.sc_auth.AclObjectsListRequest.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.sc_auth.OrderField, opt_index);
};


proto.sc_auth.AclObjectsListRequest.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclObjectsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclObjectsList.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclObjectsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclObjectsList.displayName = 'proto.sc_auth.AclObjectsList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclObjectsList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclObjectsList.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclObjectsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclObjectsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclObjectsList.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    proto.sc_auth.AclObject.toObject, includeInstance),
    page: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclObjectsList}
 */
proto.sc_auth.AclObjectsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclObjectsList;
  return proto.sc_auth.AclObjectsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclObjectsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclObjectsList}
 */
proto.sc_auth.AclObjectsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc_auth.AclObject;
      reader.readMessage(value,proto.sc_auth.AclObject.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclObjectsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclObjectsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclObjectsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclObjectsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc_auth.AclObject.serializeBinaryToWriter
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * repeated AclObject objects = 1;
 * @return {!Array<!proto.sc_auth.AclObject>}
 */
proto.sc_auth.AclObjectsList.prototype.getObjectsList = function() {
  return /** @type{!Array<!proto.sc_auth.AclObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.AclObject, 1));
};


/** @param {!Array<!proto.sc_auth.AclObject>} value */
proto.sc_auth.AclObjectsList.prototype.setObjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sc_auth.AclObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.AclObject}
 */
proto.sc_auth.AclObjectsList.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sc_auth.AclObject, opt_index);
};


proto.sc_auth.AclObjectsList.prototype.clearObjectsList = function() {
  this.setObjectsList([]);
};


/**
 * optional int64 page = 2;
 * @return {number}
 */
proto.sc_auth.AclObjectsList.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.AclObjectsList.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 pageSize = 3;
 * @return {number}
 */
proto.sc_auth.AclObjectsList.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.AclObjectsList.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 total = 4;
 * @return {number}
 */
proto.sc_auth.AclObjectsList.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_auth.AclObjectsList.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclObjectsArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclObjectsArray.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclObjectsArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclObjectsArray.displayName = 'proto.sc_auth.AclObjectsArray';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclObjectsArray.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclObjectsArray.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclObjectsArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclObjectsArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclObjectsArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    proto.sc_auth.AclObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclObjectsArray}
 */
proto.sc_auth.AclObjectsArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclObjectsArray;
  return proto.sc_auth.AclObjectsArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclObjectsArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclObjectsArray}
 */
proto.sc_auth.AclObjectsArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc_auth.AclObject;
      reader.readMessage(value,proto.sc_auth.AclObject.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclObjectsArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclObjectsArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclObjectsArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclObjectsArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc_auth.AclObject.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AclObject objects = 1;
 * @return {!Array<!proto.sc_auth.AclObject>}
 */
proto.sc_auth.AclObjectsArray.prototype.getObjectsList = function() {
  return /** @type{!Array<!proto.sc_auth.AclObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.AclObject, 1));
};


/** @param {!Array<!proto.sc_auth.AclObject>} value */
proto.sc_auth.AclObjectsArray.prototype.setObjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sc_auth.AclObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.AclObject}
 */
proto.sc_auth.AclObjectsArray.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sc_auth.AclObject, opt_index);
};


proto.sc_auth.AclObjectsArray.prototype.clearObjectsList = function() {
  this.setObjectsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.GetAclsByRolesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_auth.GetAclsByRolesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.GetAclsByRolesResponse.displayName = 'proto.sc_auth.GetAclsByRolesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.GetAclsByRolesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.GetAclsByRolesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.GetAclsByRolesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.GetAclsByRolesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    aclsMap: (f = msg.getAclsMap()) ? f.toObject(includeInstance, proto.sc_auth.AclObjectsArray.toObject) : [],
    error: (f = msg.getError()) && base_base_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.GetAclsByRolesResponse}
 */
proto.sc_auth.GetAclsByRolesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.GetAclsByRolesResponse;
  return proto.sc_auth.GetAclsByRolesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.GetAclsByRolesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.GetAclsByRolesResponse}
 */
proto.sc_auth.GetAclsByRolesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAclsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.sc_auth.AclObjectsArray.deserializeBinaryFromReader, "");
         });
      break;
    case 2:
      var value = new base_base_pb.Error;
      reader.readMessage(value,base_base_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.GetAclsByRolesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.GetAclsByRolesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.GetAclsByRolesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.GetAclsByRolesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAclsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.sc_auth.AclObjectsArray.serializeBinaryToWriter);
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_base_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, AclObjectsArray> acls = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.sc_auth.AclObjectsArray>}
 */
proto.sc_auth.GetAclsByRolesResponse.prototype.getAclsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.sc_auth.AclObjectsArray>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.sc_auth.AclObjectsArray));
};


proto.sc_auth.GetAclsByRolesResponse.prototype.clearAclsMap = function() {
  this.getAclsMap().clear();
};


/**
 * optional base.Error error = 2;
 * @return {?proto.base.Error}
 */
proto.sc_auth.GetAclsByRolesResponse.prototype.getError = function() {
  return /** @type{?proto.base.Error} */ (
    jspb.Message.getWrapperField(this, base_base_pb.Error, 2));
};


/** @param {?proto.base.Error|undefined} value */
proto.sc_auth.GetAclsByRolesResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.sc_auth.GetAclsByRolesResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.GetAclsByRolesResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclObjectsByRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclObjectsByRole.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclObjectsByRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclObjectsByRole.displayName = 'proto.sc_auth.AclObjectsByRole';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclObjectsByRole.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclObjectsByRole.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclObjectsByRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclObjectsByRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclObjectsByRole.toObject = function(includeInstance, msg) {
  var f, obj = {
    role: jspb.Message.getFieldWithDefault(msg, 1, ""),
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    proto.sc_auth.AclObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclObjectsByRole}
 */
proto.sc_auth.AclObjectsByRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclObjectsByRole;
  return proto.sc_auth.AclObjectsByRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclObjectsByRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclObjectsByRole}
 */
proto.sc_auth.AclObjectsByRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRole(value);
      break;
    case 2:
      var value = new proto.sc_auth.AclObject;
      reader.readMessage(value,proto.sc_auth.AclObject.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclObjectsByRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclObjectsByRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclObjectsByRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclObjectsByRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRole();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sc_auth.AclObject.serializeBinaryToWriter
    );
  }
};


/**
 * optional string role = 1;
 * @return {string}
 */
proto.sc_auth.AclObjectsByRole.prototype.getRole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_auth.AclObjectsByRole.prototype.setRole = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated AclObject objects = 2;
 * @return {!Array<!proto.sc_auth.AclObject>}
 */
proto.sc_auth.AclObjectsByRole.prototype.getObjectsList = function() {
  return /** @type{!Array<!proto.sc_auth.AclObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.AclObject, 2));
};


/** @param {!Array<!proto.sc_auth.AclObject>} value */
proto.sc_auth.AclObjectsByRole.prototype.setObjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sc_auth.AclObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.AclObject}
 */
proto.sc_auth.AclObjectsByRole.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sc_auth.AclObject, opt_index);
};


proto.sc_auth.AclObjectsByRole.prototype.clearObjectsList = function() {
  this.setObjectsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.GetAclsByRolesArrayResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.GetAclsByRolesArrayResponse.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.GetAclsByRolesArrayResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.GetAclsByRolesArrayResponse.displayName = 'proto.sc_auth.GetAclsByRolesArrayResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.GetAclsByRolesArrayResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.GetAclsByRolesArrayResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.GetAclsByRolesArrayResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.GetAclsByRolesArrayResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.GetAclsByRolesArrayResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    aclsList: jspb.Message.toObjectList(msg.getAclsList(),
    proto.sc_auth.AclObjectsByRole.toObject, includeInstance),
    error: (f = msg.getError()) && base_base_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.GetAclsByRolesArrayResponse}
 */
proto.sc_auth.GetAclsByRolesArrayResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.GetAclsByRolesArrayResponse;
  return proto.sc_auth.GetAclsByRolesArrayResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.GetAclsByRolesArrayResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.GetAclsByRolesArrayResponse}
 */
proto.sc_auth.GetAclsByRolesArrayResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc_auth.AclObjectsByRole;
      reader.readMessage(value,proto.sc_auth.AclObjectsByRole.deserializeBinaryFromReader);
      msg.addAcls(value);
      break;
    case 2:
      var value = new base_base_pb.Error;
      reader.readMessage(value,base_base_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.GetAclsByRolesArrayResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.GetAclsByRolesArrayResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.GetAclsByRolesArrayResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.GetAclsByRolesArrayResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAclsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc_auth.AclObjectsByRole.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      base_base_pb.Error.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AclObjectsByRole acls = 1;
 * @return {!Array<!proto.sc_auth.AclObjectsByRole>}
 */
proto.sc_auth.GetAclsByRolesArrayResponse.prototype.getAclsList = function() {
  return /** @type{!Array<!proto.sc_auth.AclObjectsByRole>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.AclObjectsByRole, 1));
};


/** @param {!Array<!proto.sc_auth.AclObjectsByRole>} value */
proto.sc_auth.GetAclsByRolesArrayResponse.prototype.setAclsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sc_auth.AclObjectsByRole=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.AclObjectsByRole}
 */
proto.sc_auth.GetAclsByRolesArrayResponse.prototype.addAcls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sc_auth.AclObjectsByRole, opt_index);
};


proto.sc_auth.GetAclsByRolesArrayResponse.prototype.clearAclsList = function() {
  this.setAclsList([]);
};


/**
 * optional base.Error error = 2;
 * @return {?proto.base.Error}
 */
proto.sc_auth.GetAclsByRolesArrayResponse.prototype.getError = function() {
  return /** @type{?proto.base.Error} */ (
    jspb.Message.getWrapperField(this, base_base_pb.Error, 2));
};


/** @param {?proto.base.Error|undefined} value */
proto.sc_auth.GetAclsByRolesArrayResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.sc_auth.GetAclsByRolesArrayResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.GetAclsByRolesArrayResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclObject.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclObject.displayName = 'proto.sc_auth.AclObject';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclObject.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclObject.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclObject.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.sc_auth.AclField.toObject, includeInstance),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.sc_auth.AclAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclObject}
 */
proto.sc_auth.AclObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclObject;
  return proto.sc_auth.AclObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclObject}
 */
proto.sc_auth.AclObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.sc_auth.AclField;
      reader.readMessage(value,proto.sc_auth.AclField.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    case 4:
      var value = new proto.sc_auth.AclAction;
      reader.readMessage(value,proto.sc_auth.AclAction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.sc_auth.AclField.serializeBinaryToWriter
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.sc_auth.AclAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.sc_auth.AclObject.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.AclObject.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sc_auth.AclObject.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_auth.AclObject.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated AclField fields = 3;
 * @return {!Array<!proto.sc_auth.AclField>}
 */
proto.sc_auth.AclObject.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.sc_auth.AclField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.AclField, 3));
};


/** @param {!Array<!proto.sc_auth.AclField>} value */
proto.sc_auth.AclObject.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.sc_auth.AclField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.AclField}
 */
proto.sc_auth.AclObject.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.sc_auth.AclField, opt_index);
};


proto.sc_auth.AclObject.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};


/**
 * repeated AclAction actions = 4;
 * @return {!Array<!proto.sc_auth.AclAction>}
 */
proto.sc_auth.AclObject.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.sc_auth.AclAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.AclAction, 4));
};


/** @param {!Array<!proto.sc_auth.AclAction>} value */
proto.sc_auth.AclObject.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.sc_auth.AclAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.AclAction}
 */
proto.sc_auth.AclObject.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.sc_auth.AclAction, opt_index);
};


proto.sc_auth.AclObject.prototype.clearActionsList = function() {
  this.setActionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclField.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclField.displayName = 'proto.sc_auth.AclField';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclField.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclField.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclField.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    objectid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.sc_auth.AclAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclField}
 */
proto.sc_auth.AclField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclField;
  return proto.sc_auth.AclField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclField}
 */
proto.sc_auth.AclField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObjectid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = new proto.sc_auth.AclAction;
      reader.readMessage(value,proto.sc_auth.AclAction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getObjectid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.sc_auth.AclAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.sc_auth.AclField.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.AclField.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 objectId = 2;
 * @return {number}
 */
proto.sc_auth.AclField.prototype.getObjectid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.AclField.prototype.setObjectid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.sc_auth.AclField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sc_auth.AclField.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated AclAction actions = 4;
 * @return {!Array<!proto.sc_auth.AclAction>}
 */
proto.sc_auth.AclField.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.sc_auth.AclAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.AclAction, 4));
};


/** @param {!Array<!proto.sc_auth.AclAction>} value */
proto.sc_auth.AclField.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.sc_auth.AclAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.AclAction}
 */
proto.sc_auth.AclField.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.sc_auth.AclAction, opt_index);
};


proto.sc_auth.AclField.prototype.clearActionsList = function() {
  this.setActionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclFieldsListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclFieldsListRequest.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclFieldsListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclFieldsListRequest.displayName = 'proto.sc_auth.AclFieldsListRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclFieldsListRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclFieldsListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclFieldsListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclFieldsListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclFieldsListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    objectid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.sc_auth.OrderField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclFieldsListRequest}
 */
proto.sc_auth.AclFieldsListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclFieldsListRequest;
  return proto.sc_auth.AclFieldsListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclFieldsListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclFieldsListRequest}
 */
proto.sc_auth.AclFieldsListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObjectid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = new proto.sc_auth.OrderField;
      reader.readMessage(value,proto.sc_auth.OrderField.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclFieldsListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclFieldsListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclFieldsListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclFieldsListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getObjectid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.sc_auth.OrderField.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 page = 1;
 * @return {number}
 */
proto.sc_auth.AclFieldsListRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.AclFieldsListRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 pageSize = 2;
 * @return {number}
 */
proto.sc_auth.AclFieldsListRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.AclFieldsListRequest.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 id = 3;
 * @return {number}
 */
proto.sc_auth.AclFieldsListRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.AclFieldsListRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 objectId = 4;
 * @return {number}
 */
proto.sc_auth.AclFieldsListRequest.prototype.getObjectid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_auth.AclFieldsListRequest.prototype.setObjectid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.sc_auth.AclFieldsListRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sc_auth.AclFieldsListRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated OrderField order = 6;
 * @return {!Array<!proto.sc_auth.OrderField>}
 */
proto.sc_auth.AclFieldsListRequest.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.sc_auth.OrderField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.OrderField, 6));
};


/** @param {!Array<!proto.sc_auth.OrderField>} value */
proto.sc_auth.AclFieldsListRequest.prototype.setOrderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.sc_auth.OrderField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.OrderField}
 */
proto.sc_auth.AclFieldsListRequest.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.sc_auth.OrderField, opt_index);
};


proto.sc_auth.AclFieldsListRequest.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclFieldsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclFieldsList.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclFieldsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclFieldsList.displayName = 'proto.sc_auth.AclFieldsList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclFieldsList.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclFieldsList.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclFieldsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclFieldsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclFieldsList.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    total: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.sc_auth.AclField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclFieldsList}
 */
proto.sc_auth.AclFieldsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclFieldsList;
  return proto.sc_auth.AclFieldsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclFieldsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclFieldsList}
 */
proto.sc_auth.AclFieldsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    case 4:
      var value = new proto.sc_auth.AclField;
      reader.readMessage(value,proto.sc_auth.AclField.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclFieldsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclFieldsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclFieldsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclFieldsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.sc_auth.AclField.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 page = 1;
 * @return {number}
 */
proto.sc_auth.AclFieldsList.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.AclFieldsList.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 pageSize = 2;
 * @return {number}
 */
proto.sc_auth.AclFieldsList.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.AclFieldsList.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 total = 3;
 * @return {number}
 */
proto.sc_auth.AclFieldsList.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.AclFieldsList.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated AclField fields = 4;
 * @return {!Array<!proto.sc_auth.AclField>}
 */
proto.sc_auth.AclFieldsList.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.sc_auth.AclField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.AclField, 4));
};


/** @param {!Array<!proto.sc_auth.AclField>} value */
proto.sc_auth.AclFieldsList.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.sc_auth.AclField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.AclField}
 */
proto.sc_auth.AclFieldsList.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.sc_auth.AclField, opt_index);
};


proto.sc_auth.AclFieldsList.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.Role = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_auth.Role, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.Role.displayName = 'proto.sc_auth.Role';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.Role.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.Role.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.Role} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.Role.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isadmin: jspb.Message.getFieldWithDefault(msg, 3, false),
    ispublic: jspb.Message.getFieldWithDefault(msg, 4, false),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.Role}
 */
proto.sc_auth.Role.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.Role;
  return proto.sc_auth.Role.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.Role} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.Role}
 */
proto.sc_auth.Role.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsadmin(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspublic(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.Role.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.Role.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.Role} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.Role.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsadmin();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIspublic();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.sc_auth.Role.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.Role.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sc_auth.Role.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_auth.Role.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool isAdmin = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_auth.Role.prototype.getIsadmin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.sc_auth.Role.prototype.setIsadmin = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool isPublic = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_auth.Role.prototype.getIspublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.sc_auth.Role.prototype.setIspublic = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sc_auth.Role.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.sc_auth.Role.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.sc_auth.Role.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.Role.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sc_auth.Role.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.sc_auth.Role.prototype.setUpdatedAt = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.sc_auth.Role.prototype.clearUpdatedAt = function() {
  this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.Role.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.RolesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.RolesList.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.RolesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.RolesList.displayName = 'proto.sc_auth.RolesList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.RolesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.RolesList.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.RolesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.RolesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.RolesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.sc_auth.Role.toObject, includeInstance),
    page: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.RolesList}
 */
proto.sc_auth.RolesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.RolesList;
  return proto.sc_auth.RolesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.RolesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.RolesList}
 */
proto.sc_auth.RolesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc_auth.Role;
      reader.readMessage(value,proto.sc_auth.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.RolesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.RolesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.RolesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.RolesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc_auth.Role.serializeBinaryToWriter
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * repeated Role roles = 1;
 * @return {!Array<!proto.sc_auth.Role>}
 */
proto.sc_auth.RolesList.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.sc_auth.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.Role, 1));
};


/** @param {!Array<!proto.sc_auth.Role>} value */
proto.sc_auth.RolesList.prototype.setRolesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sc_auth.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.Role}
 */
proto.sc_auth.RolesList.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sc_auth.Role, opt_index);
};


proto.sc_auth.RolesList.prototype.clearRolesList = function() {
  this.setRolesList([]);
};


/**
 * optional int64 page = 2;
 * @return {number}
 */
proto.sc_auth.RolesList.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.RolesList.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 pageSize = 3;
 * @return {number}
 */
proto.sc_auth.RolesList.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.RolesList.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 total = 4;
 * @return {number}
 */
proto.sc_auth.RolesList.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_auth.RolesList.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AllRolesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AllRolesList.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AllRolesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AllRolesList.displayName = 'proto.sc_auth.AllRolesList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AllRolesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AllRolesList.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AllRolesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AllRolesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AllRolesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
    proto.sc_auth.Role.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AllRolesList}
 */
proto.sc_auth.AllRolesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AllRolesList;
  return proto.sc_auth.AllRolesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AllRolesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AllRolesList}
 */
proto.sc_auth.AllRolesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc_auth.Role;
      reader.readMessage(value,proto.sc_auth.Role.deserializeBinaryFromReader);
      msg.addRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AllRolesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AllRolesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AllRolesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AllRolesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc_auth.Role.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Role roles = 1;
 * @return {!Array<!proto.sc_auth.Role>}
 */
proto.sc_auth.AllRolesList.prototype.getRolesList = function() {
  return /** @type{!Array<!proto.sc_auth.Role>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.Role, 1));
};


/** @param {!Array<!proto.sc_auth.Role>} value */
proto.sc_auth.AllRolesList.prototype.setRolesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sc_auth.Role=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.Role}
 */
proto.sc_auth.AllRolesList.prototype.addRoles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sc_auth.Role, opt_index);
};


proto.sc_auth.AllRolesList.prototype.clearRolesList = function() {
  this.setRolesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclActionType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_auth.AclActionType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclActionType.displayName = 'proto.sc_auth.AclActionType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclActionType.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclActionType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclActionType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclActionType.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclActionType}
 */
proto.sc_auth.AclActionType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclActionType;
  return proto.sc_auth.AclActionType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclActionType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclActionType}
 */
proto.sc_auth.AclActionType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.sc_auth.AclType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclActionType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclActionType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclActionType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclActionType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.sc_auth.AclActionType.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionType.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sc_auth.AclActionType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_auth.AclActionType.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AclType type = 3;
 * @return {!proto.sc_auth.AclType}
 */
proto.sc_auth.AclActionType.prototype.getType = function() {
  return /** @type {!proto.sc_auth.AclType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.sc_auth.AclType} value */
proto.sc_auth.AclActionType.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclTypeFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_auth.AclTypeFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclTypeFilter.displayName = 'proto.sc_auth.AclTypeFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclTypeFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclTypeFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclTypeFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclTypeFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    acltype: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclTypeFilter}
 */
proto.sc_auth.AclTypeFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclTypeFilter;
  return proto.sc_auth.AclTypeFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclTypeFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclTypeFilter}
 */
proto.sc_auth.AclTypeFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sc_auth.AclType} */ (reader.readEnum());
      msg.setAcltype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclTypeFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclTypeFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclTypeFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclTypeFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAcltype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional AclType aclType = 1;
 * @return {!proto.sc_auth.AclType}
 */
proto.sc_auth.AclTypeFilter.prototype.getAcltype = function() {
  return /** @type {!proto.sc_auth.AclType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.sc_auth.AclType} value */
proto.sc_auth.AclTypeFilter.prototype.setAcltype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclActionTypesListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclActionTypesListRequest.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclActionTypesListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclActionTypesListRequest.displayName = 'proto.sc_auth.AclActionTypesListRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclActionTypesListRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclActionTypesListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclActionTypesListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclActionTypesListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclActionTypesListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: (f = msg.getType()) && proto.sc_auth.AclTypeFilter.toObject(includeInstance, f),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.sc_auth.OrderField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclActionTypesListRequest}
 */
proto.sc_auth.AclActionTypesListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclActionTypesListRequest;
  return proto.sc_auth.AclActionTypesListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclActionTypesListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclActionTypesListRequest}
 */
proto.sc_auth.AclActionTypesListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = new proto.sc_auth.AclTypeFilter;
      reader.readMessage(value,proto.sc_auth.AclTypeFilter.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 6:
      var value = new proto.sc_auth.OrderField;
      reader.readMessage(value,proto.sc_auth.OrderField.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclActionTypesListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclActionTypesListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclActionTypesListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclActionTypesListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sc_auth.AclTypeFilter.serializeBinaryToWriter
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.sc_auth.OrderField.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 page = 1;
 * @return {number}
 */
proto.sc_auth.AclActionTypesListRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionTypesListRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 pageSize = 2;
 * @return {number}
 */
proto.sc_auth.AclActionTypesListRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionTypesListRequest.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 id = 3;
 * @return {number}
 */
proto.sc_auth.AclActionTypesListRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionTypesListRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.sc_auth.AclActionTypesListRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sc_auth.AclActionTypesListRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional AclTypeFilter type = 5;
 * @return {?proto.sc_auth.AclTypeFilter}
 */
proto.sc_auth.AclActionTypesListRequest.prototype.getType = function() {
  return /** @type{?proto.sc_auth.AclTypeFilter} */ (
    jspb.Message.getWrapperField(this, proto.sc_auth.AclTypeFilter, 5));
};


/** @param {?proto.sc_auth.AclTypeFilter|undefined} value */
proto.sc_auth.AclActionTypesListRequest.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.sc_auth.AclActionTypesListRequest.prototype.clearType = function() {
  this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.AclActionTypesListRequest.prototype.hasType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated OrderField order = 6;
 * @return {!Array<!proto.sc_auth.OrderField>}
 */
proto.sc_auth.AclActionTypesListRequest.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.sc_auth.OrderField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.OrderField, 6));
};


/** @param {!Array<!proto.sc_auth.OrderField>} value */
proto.sc_auth.AclActionTypesListRequest.prototype.setOrderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.sc_auth.OrderField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.OrderField}
 */
proto.sc_auth.AclActionTypesListRequest.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.sc_auth.OrderField, opt_index);
};


proto.sc_auth.AclActionTypesListRequest.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclActionTypesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclActionTypesList.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclActionTypesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclActionTypesList.displayName = 'proto.sc_auth.AclActionTypesList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclActionTypesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclActionTypesList.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclActionTypesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclActionTypesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclActionTypesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.sc_auth.AclActionType.toObject, includeInstance),
    page: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclActionTypesList}
 */
proto.sc_auth.AclActionTypesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclActionTypesList;
  return proto.sc_auth.AclActionTypesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclActionTypesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclActionTypesList}
 */
proto.sc_auth.AclActionTypesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc_auth.AclActionType;
      reader.readMessage(value,proto.sc_auth.AclActionType.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclActionTypesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclActionTypesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclActionTypesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclActionTypesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc_auth.AclActionType.serializeBinaryToWriter
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * repeated AclActionType items = 1;
 * @return {!Array<!proto.sc_auth.AclActionType>}
 */
proto.sc_auth.AclActionTypesList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.sc_auth.AclActionType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.AclActionType, 1));
};


/** @param {!Array<!proto.sc_auth.AclActionType>} value */
proto.sc_auth.AclActionTypesList.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sc_auth.AclActionType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.AclActionType}
 */
proto.sc_auth.AclActionTypesList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sc_auth.AclActionType, opt_index);
};


proto.sc_auth.AclActionTypesList.prototype.clearItemsList = function() {
  this.setItemsList([]);
};


/**
 * optional int64 page = 2;
 * @return {number}
 */
proto.sc_auth.AclActionTypesList.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionTypesList.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 pageSize = 3;
 * @return {number}
 */
proto.sc_auth.AclActionTypesList.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionTypesList.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 total = 4;
 * @return {number}
 */
proto.sc_auth.AclActionTypesList.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionTypesList.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_auth.AclAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclAction.displayName = 'proto.sc_auth.AclAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclAction.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    role: (f = msg.getRole()) && proto.sc_auth.IdNameObj.toObject(includeInstance, f),
    objectid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    object: (f = msg.getObject()) && proto.sc_auth.IdNameObj.toObject(includeInstance, f),
    fieldid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    field: (f = msg.getField()) && proto.sc_auth.IdNameObj.toObject(includeInstance, f),
    actiontype: (f = msg.getActiontype()) && proto.sc_auth.AclActionType.toObject(includeInstance, f),
    condition: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclAction}
 */
proto.sc_auth.AclAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclAction;
  return proto.sc_auth.AclAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclAction}
 */
proto.sc_auth.AclAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRoleid(value);
      break;
    case 3:
      var value = new proto.sc_auth.IdNameObj;
      reader.readMessage(value,proto.sc_auth.IdNameObj.deserializeBinaryFromReader);
      msg.setRole(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObjectid(value);
      break;
    case 5:
      var value = new proto.sc_auth.IdNameObj;
      reader.readMessage(value,proto.sc_auth.IdNameObj.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFieldid(value);
      break;
    case 7:
      var value = new proto.sc_auth.IdNameObj;
      reader.readMessage(value,proto.sc_auth.IdNameObj.deserializeBinaryFromReader);
      msg.setField(value);
      break;
    case 8:
      var value = new proto.sc_auth.AclActionType;
      reader.readMessage(value,proto.sc_auth.AclActionType.deserializeBinaryFromReader);
      msg.setActiontype(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCondition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getRole();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sc_auth.IdNameObj.serializeBinaryToWriter
    );
  }
  f = message.getObjectid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sc_auth.IdNameObj.serializeBinaryToWriter
    );
  }
  f = message.getFieldid();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getField();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.sc_auth.IdNameObj.serializeBinaryToWriter
    );
  }
  f = message.getActiontype();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.sc_auth.AclActionType.serializeBinaryToWriter
    );
  }
  f = message.getCondition();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.sc_auth.AclAction.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.AclAction.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 roleId = 2;
 * @return {number}
 */
proto.sc_auth.AclAction.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.AclAction.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional IdNameObj role = 3;
 * @return {?proto.sc_auth.IdNameObj}
 */
proto.sc_auth.AclAction.prototype.getRole = function() {
  return /** @type{?proto.sc_auth.IdNameObj} */ (
    jspb.Message.getWrapperField(this, proto.sc_auth.IdNameObj, 3));
};


/** @param {?proto.sc_auth.IdNameObj|undefined} value */
proto.sc_auth.AclAction.prototype.setRole = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.sc_auth.AclAction.prototype.clearRole = function() {
  this.setRole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.AclAction.prototype.hasRole = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 objectId = 4;
 * @return {number}
 */
proto.sc_auth.AclAction.prototype.getObjectid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_auth.AclAction.prototype.setObjectid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional IdNameObj object = 5;
 * @return {?proto.sc_auth.IdNameObj}
 */
proto.sc_auth.AclAction.prototype.getObject = function() {
  return /** @type{?proto.sc_auth.IdNameObj} */ (
    jspb.Message.getWrapperField(this, proto.sc_auth.IdNameObj, 5));
};


/** @param {?proto.sc_auth.IdNameObj|undefined} value */
proto.sc_auth.AclAction.prototype.setObject = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.sc_auth.AclAction.prototype.clearObject = function() {
  this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.AclAction.prototype.hasObject = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 fieldId = 6;
 * @return {number}
 */
proto.sc_auth.AclAction.prototype.getFieldid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.sc_auth.AclAction.prototype.setFieldid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional IdNameObj field = 7;
 * @return {?proto.sc_auth.IdNameObj}
 */
proto.sc_auth.AclAction.prototype.getField = function() {
  return /** @type{?proto.sc_auth.IdNameObj} */ (
    jspb.Message.getWrapperField(this, proto.sc_auth.IdNameObj, 7));
};


/** @param {?proto.sc_auth.IdNameObj|undefined} value */
proto.sc_auth.AclAction.prototype.setField = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.sc_auth.AclAction.prototype.clearField = function() {
  this.setField(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.AclAction.prototype.hasField = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AclActionType actionType = 8;
 * @return {?proto.sc_auth.AclActionType}
 */
proto.sc_auth.AclAction.prototype.getActiontype = function() {
  return /** @type{?proto.sc_auth.AclActionType} */ (
    jspb.Message.getWrapperField(this, proto.sc_auth.AclActionType, 8));
};


/** @param {?proto.sc_auth.AclActionType|undefined} value */
proto.sc_auth.AclAction.prototype.setActiontype = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.sc_auth.AclAction.prototype.clearActiontype = function() {
  this.setActiontype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.AclAction.prototype.hasActiontype = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string condition = 9;
 * @return {string}
 */
proto.sc_auth.AclAction.prototype.getCondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.sc_auth.AclAction.prototype.setCondition = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclActionsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclActionsList.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclActionsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclActionsList.displayName = 'proto.sc_auth.AclActionsList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclActionsList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclActionsList.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclActionsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclActionsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclActionsList.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.sc_auth.AclAction.toObject, includeInstance),
    page: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    total: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclActionsList}
 */
proto.sc_auth.AclActionsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclActionsList;
  return proto.sc_auth.AclActionsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclActionsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclActionsList}
 */
proto.sc_auth.AclActionsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sc_auth.AclAction;
      reader.readMessage(value,proto.sc_auth.AclAction.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclActionsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclActionsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclActionsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclActionsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sc_auth.AclAction.serializeBinaryToWriter
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * repeated AclAction items = 1;
 * @return {!Array<!proto.sc_auth.AclAction>}
 */
proto.sc_auth.AclActionsList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.sc_auth.AclAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.AclAction, 1));
};


/** @param {!Array<!proto.sc_auth.AclAction>} value */
proto.sc_auth.AclActionsList.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sc_auth.AclAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.AclAction}
 */
proto.sc_auth.AclActionsList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sc_auth.AclAction, opt_index);
};


proto.sc_auth.AclActionsList.prototype.clearItemsList = function() {
  this.setItemsList([]);
};


/**
 * optional int64 page = 2;
 * @return {number}
 */
proto.sc_auth.AclActionsList.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionsList.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 pageSize = 3;
 * @return {number}
 */
proto.sc_auth.AclActionsList.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionsList.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 total = 4;
 * @return {number}
 */
proto.sc_auth.AclActionsList.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionsList.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.IdNameObj = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_auth.IdNameObj, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.IdNameObj.displayName = 'proto.sc_auth.IdNameObj';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.IdNameObj.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.IdNameObj.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.IdNameObj} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.IdNameObj.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.IdNameObj}
 */
proto.sc_auth.IdNameObj.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.IdNameObj;
  return proto.sc_auth.IdNameObj.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.IdNameObj} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.IdNameObj}
 */
proto.sc_auth.IdNameObj.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.IdNameObj.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.IdNameObj.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.IdNameObj} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.IdNameObj.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.sc_auth.IdNameObj.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.IdNameObj.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sc_auth.IdNameObj.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_auth.IdNameObj.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.AclActionsListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.AclActionsListRequest.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.AclActionsListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.AclActionsListRequest.displayName = 'proto.sc_auth.AclActionsListRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.AclActionsListRequest.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.AclActionsListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.AclActionsListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.AclActionsListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclActionsListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    objectid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fieldid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    actiontype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    condition: jspb.Message.getFieldWithDefault(msg, 6, ""),
    page: jspb.Message.getFieldWithDefault(msg, 7, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 8, 0),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.sc_auth.OrderField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.AclActionsListRequest}
 */
proto.sc_auth.AclActionsListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.AclActionsListRequest;
  return proto.sc_auth.AclActionsListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.AclActionsListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.AclActionsListRequest}
 */
proto.sc_auth.AclActionsListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRoleid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObjectid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFieldid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActiontype(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCondition(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 9:
      var value = new proto.sc_auth.OrderField;
      reader.readMessage(value,proto.sc_auth.OrderField.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.AclActionsListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.AclActionsListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.AclActionsListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.AclActionsListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getObjectid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getFieldid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getActiontype();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCondition();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.sc_auth.OrderField.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.sc_auth.AclActionsListRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionsListRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 roleId = 2;
 * @return {number}
 */
proto.sc_auth.AclActionsListRequest.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionsListRequest.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 objectId = 3;
 * @return {number}
 */
proto.sc_auth.AclActionsListRequest.prototype.getObjectid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionsListRequest.prototype.setObjectid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 fieldId = 4;
 * @return {number}
 */
proto.sc_auth.AclActionsListRequest.prototype.getFieldid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionsListRequest.prototype.setFieldid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 actionType = 5;
 * @return {number}
 */
proto.sc_auth.AclActionsListRequest.prototype.getActiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionsListRequest.prototype.setActiontype = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string condition = 6;
 * @return {string}
 */
proto.sc_auth.AclActionsListRequest.prototype.getCondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.sc_auth.AclActionsListRequest.prototype.setCondition = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 page = 7;
 * @return {number}
 */
proto.sc_auth.AclActionsListRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionsListRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 pageSize = 8;
 * @return {number}
 */
proto.sc_auth.AclActionsListRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.sc_auth.AclActionsListRequest.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated OrderField order = 9;
 * @return {!Array<!proto.sc_auth.OrderField>}
 */
proto.sc_auth.AclActionsListRequest.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.sc_auth.OrderField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.OrderField, 9));
};


/** @param {!Array<!proto.sc_auth.OrderField>} value */
proto.sc_auth.AclActionsListRequest.prototype.setOrderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.sc_auth.OrderField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.OrderField}
 */
proto.sc_auth.AclActionsListRequest.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.sc_auth.OrderField, opt_index);
};


proto.sc_auth.AclActionsListRequest.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.UsersListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.UsersListRequest.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.UsersListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.UsersListRequest.displayName = 'proto.sc_auth.UsersListRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.UsersListRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.UsersListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.UsersListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.UsersListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.UsersListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    blocked: (f = msg.getBlocked()) && proto.sc_auth.BoolFilter.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    page: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 7, 0),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.sc_auth.OrderField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.UsersListRequest}
 */
proto.sc_auth.UsersListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.UsersListRequest;
  return proto.sc_auth.UsersListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.UsersListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.UsersListRequest}
 */
proto.sc_auth.UsersListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = new proto.sc_auth.BoolFilter;
      reader.readMessage(value,proto.sc_auth.BoolFilter.deserializeBinaryFromReader);
      msg.setBlocked(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 8:
      var value = new proto.sc_auth.OrderField;
      reader.readMessage(value,proto.sc_auth.OrderField.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.UsersListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.UsersListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.UsersListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.UsersListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBlocked();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sc_auth.BoolFilter.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.sc_auth.OrderField.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sc_auth.UsersListRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_auth.UsersListRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.sc_auth.UsersListRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_auth.UsersListRequest.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional BoolFilter blocked = 3;
 * @return {?proto.sc_auth.BoolFilter}
 */
proto.sc_auth.UsersListRequest.prototype.getBlocked = function() {
  return /** @type{?proto.sc_auth.BoolFilter} */ (
    jspb.Message.getWrapperField(this, proto.sc_auth.BoolFilter, 3));
};


/** @param {?proto.sc_auth.BoolFilter|undefined} value */
proto.sc_auth.UsersListRequest.prototype.setBlocked = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.sc_auth.UsersListRequest.prototype.clearBlocked = function() {
  this.setBlocked(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.UsersListRequest.prototype.hasBlocked = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sc_auth.UsersListRequest.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.sc_auth.UsersListRequest.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.sc_auth.UsersListRequest.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.UsersListRequest.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sc_auth.UsersListRequest.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.sc_auth.UsersListRequest.prototype.setUpdatedAt = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.sc_auth.UsersListRequest.prototype.clearUpdatedAt = function() {
  this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.UsersListRequest.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 page = 6;
 * @return {number}
 */
proto.sc_auth.UsersListRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.sc_auth.UsersListRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 pageSize = 7;
 * @return {number}
 */
proto.sc_auth.UsersListRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.sc_auth.UsersListRequest.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated OrderField order = 8;
 * @return {!Array<!proto.sc_auth.OrderField>}
 */
proto.sc_auth.UsersListRequest.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.sc_auth.OrderField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.OrderField, 8));
};


/** @param {!Array<!proto.sc_auth.OrderField>} value */
proto.sc_auth.UsersListRequest.prototype.setOrderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.sc_auth.OrderField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.OrderField}
 */
proto.sc_auth.UsersListRequest.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.sc_auth.OrderField, opt_index);
};


proto.sc_auth.UsersListRequest.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.RolesListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_auth.RolesListRequest.repeatedFields_, null);
};
goog.inherits(proto.sc_auth.RolesListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.RolesListRequest.displayName = 'proto.sc_auth.RolesListRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_auth.RolesListRequest.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.RolesListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.RolesListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.RolesListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.RolesListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    id: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isadmin: (f = msg.getIsadmin()) && proto.sc_auth.BoolFilter.toObject(includeInstance, f),
    ispublic: (f = msg.getIspublic()) && proto.sc_auth.BoolFilter.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.sc_auth.OrderField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.RolesListRequest}
 */
proto.sc_auth.RolesListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.RolesListRequest;
  return proto.sc_auth.RolesListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.RolesListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.RolesListRequest}
 */
proto.sc_auth.RolesListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPagesize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = new proto.sc_auth.BoolFilter;
      reader.readMessage(value,proto.sc_auth.BoolFilter.deserializeBinaryFromReader);
      msg.setIsadmin(value);
      break;
    case 6:
      var value = new proto.sc_auth.BoolFilter;
      reader.readMessage(value,proto.sc_auth.BoolFilter.deserializeBinaryFromReader);
      msg.setIspublic(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    case 9:
      var value = new proto.sc_auth.OrderField;
      reader.readMessage(value,proto.sc_auth.OrderField.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.RolesListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.RolesListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.RolesListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.RolesListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsadmin();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sc_auth.BoolFilter.serializeBinaryToWriter
    );
  }
  f = message.getIspublic();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sc_auth.BoolFilter.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.sc_auth.OrderField.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 page = 1;
 * @return {number}
 */
proto.sc_auth.RolesListRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_auth.RolesListRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 pageSize = 2;
 * @return {number}
 */
proto.sc_auth.RolesListRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_auth.RolesListRequest.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 id = 3;
 * @return {number}
 */
proto.sc_auth.RolesListRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_auth.RolesListRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.sc_auth.RolesListRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sc_auth.RolesListRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional BoolFilter isAdmin = 5;
 * @return {?proto.sc_auth.BoolFilter}
 */
proto.sc_auth.RolesListRequest.prototype.getIsadmin = function() {
  return /** @type{?proto.sc_auth.BoolFilter} */ (
    jspb.Message.getWrapperField(this, proto.sc_auth.BoolFilter, 5));
};


/** @param {?proto.sc_auth.BoolFilter|undefined} value */
proto.sc_auth.RolesListRequest.prototype.setIsadmin = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.sc_auth.RolesListRequest.prototype.clearIsadmin = function() {
  this.setIsadmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.RolesListRequest.prototype.hasIsadmin = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BoolFilter isPublic = 6;
 * @return {?proto.sc_auth.BoolFilter}
 */
proto.sc_auth.RolesListRequest.prototype.getIspublic = function() {
  return /** @type{?proto.sc_auth.BoolFilter} */ (
    jspb.Message.getWrapperField(this, proto.sc_auth.BoolFilter, 6));
};


/** @param {?proto.sc_auth.BoolFilter|undefined} value */
proto.sc_auth.RolesListRequest.prototype.setIspublic = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.sc_auth.RolesListRequest.prototype.clearIspublic = function() {
  this.setIspublic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.RolesListRequest.prototype.hasIspublic = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sc_auth.RolesListRequest.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.sc_auth.RolesListRequest.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.sc_auth.RolesListRequest.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.RolesListRequest.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.sc_auth.RolesListRequest.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.sc_auth.RolesListRequest.prototype.setUpdatedAt = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.sc_auth.RolesListRequest.prototype.clearUpdatedAt = function() {
  this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_auth.RolesListRequest.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated OrderField order = 9;
 * @return {!Array<!proto.sc_auth.OrderField>}
 */
proto.sc_auth.RolesListRequest.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.sc_auth.OrderField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_auth.OrderField, 9));
};


/** @param {!Array<!proto.sc_auth.OrderField>} value */
proto.sc_auth.RolesListRequest.prototype.setOrderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.sc_auth.OrderField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_auth.OrderField}
 */
proto.sc_auth.RolesListRequest.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.sc_auth.OrderField, opt_index);
};


proto.sc_auth.RolesListRequest.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_auth.OrderField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_auth.OrderField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_auth.OrderField.displayName = 'proto.sc_auth.OrderField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_auth.OrderField.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_auth.OrderField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_auth.OrderField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.OrderField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_auth.OrderField}
 */
proto.sc_auth.OrderField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_auth.OrderField;
  return proto.sc_auth.OrderField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_auth.OrderField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_auth.OrderField}
 */
proto.sc_auth.OrderField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_auth.OrderField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_auth.OrderField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_auth.OrderField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_auth.OrderField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sc_auth.OrderField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_auth.OrderField.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool desc = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_auth.OrderField.prototype.getDesc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.sc_auth.OrderField.prototype.setDesc = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.sc_auth.AclType = {
  CREATE: 0,
  READ: 1,
  UPDATE: 2,
  DELETE: 3,
  CUSTOM: 4
};

goog.object.extend(exports, proto.sc_auth);
