/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

// require('../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
var sc_db_api_common_pb = require('../sc_db_api/common_pb.js');
goog.exportSymbol('proto.sc_db_api.Collection', null, global);
goog.exportSymbol('proto.sc_db_api.CollectionMetadata', null, global);
goog.exportSymbol('proto.sc_db_api.Column', null, global);
goog.exportSymbol('proto.sc_db_api.ForeignKey', null, global);
goog.exportSymbol('proto.sc_db_api.Index', null, global);
goog.exportSymbol('proto.sc_db_api.Index.Type', null, global);
goog.exportSymbol('proto.sc_db_api.Schema', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.CollectionMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_db_api.CollectionMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.CollectionMetadata.displayName = 'proto.sc_db_api.CollectionMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.CollectionMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.CollectionMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.CollectionMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.CollectionMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ispublic: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.CollectionMetadata}
 */
proto.sc_db_api.CollectionMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.CollectionMetadata;
  return proto.sc_db_api.CollectionMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.CollectionMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.CollectionMetadata}
 */
proto.sc_db_api.CollectionMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspublic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.CollectionMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.CollectionMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.CollectionMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.CollectionMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIspublic();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sc_db_api.CollectionMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_db_api.CollectionMetadata.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool isPublic = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_db_api.CollectionMetadata.prototype.getIspublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.sc_db_api.CollectionMetadata.prototype.setIspublic = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_db_api.Schema.repeatedFields_, null);
};
goog.inherits(proto.sc_db_api.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.Schema.displayName = 'proto.sc_db_api.Schema';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_db_api.Schema.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dbname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    schemaowner: jspb.Message.getFieldWithDefault(msg, 4, ""),
    defaultcharactersetcatalog: jspb.Message.getFieldWithDefault(msg, 5, ""),
    defaultcharactersetschema: jspb.Message.getFieldWithDefault(msg, 6, ""),
    defaultcharactersetname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    sqlpath: jspb.Message.getFieldWithDefault(msg, 8, ""),
    collectionsList: jspb.Message.toObjectList(msg.getCollectionsList(),
    proto.sc_db_api.CollectionMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.Schema}
 */
proto.sc_db_api.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.Schema;
  return proto.sc_db_api.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.Schema}
 */
proto.sc_db_api.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchemaowner(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultcharactersetcatalog(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultcharactersetschema(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultcharactersetname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSqlpath(value);
      break;
    case 9:
      var value = new proto.sc_db_api.CollectionMetadata;
      reader.readMessage(value,proto.sc_db_api.CollectionMetadata.deserializeBinaryFromReader);
      msg.addCollections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSchemaowner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDefaultcharactersetcatalog();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDefaultcharactersetschema();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDefaultcharactersetname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSqlpath();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCollectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.sc_db_api.CollectionMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dbId = 1;
 * @return {string}
 */
proto.sc_db_api.Schema.prototype.getDbid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_db_api.Schema.prototype.setDbid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dbName = 2;
 * @return {string}
 */
proto.sc_db_api.Schema.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_db_api.Schema.prototype.setDbname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.sc_db_api.Schema.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sc_db_api.Schema.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string schemaOwner = 4;
 * @return {string}
 */
proto.sc_db_api.Schema.prototype.getSchemaowner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sc_db_api.Schema.prototype.setSchemaowner = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string defaultCharacterSetCatalog = 5;
 * @return {string}
 */
proto.sc_db_api.Schema.prototype.getDefaultcharactersetcatalog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sc_db_api.Schema.prototype.setDefaultcharactersetcatalog = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string defaultCharacterSetSchema = 6;
 * @return {string}
 */
proto.sc_db_api.Schema.prototype.getDefaultcharactersetschema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.sc_db_api.Schema.prototype.setDefaultcharactersetschema = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string defaultCharacterSetName = 7;
 * @return {string}
 */
proto.sc_db_api.Schema.prototype.getDefaultcharactersetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.sc_db_api.Schema.prototype.setDefaultcharactersetname = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string sqlPath = 8;
 * @return {string}
 */
proto.sc_db_api.Schema.prototype.getSqlpath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.sc_db_api.Schema.prototype.setSqlpath = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated CollectionMetadata collections = 9;
 * @return {!Array<!proto.sc_db_api.CollectionMetadata>}
 */
proto.sc_db_api.Schema.prototype.getCollectionsList = function() {
  return /** @type{!Array<!proto.sc_db_api.CollectionMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_db_api.CollectionMetadata, 9));
};


/** @param {!Array<!proto.sc_db_api.CollectionMetadata>} value */
proto.sc_db_api.Schema.prototype.setCollectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.sc_db_api.CollectionMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_db_api.CollectionMetadata}
 */
proto.sc_db_api.Schema.prototype.addCollections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.sc_db_api.CollectionMetadata, opt_index);
};


proto.sc_db_api.Schema.prototype.clearCollectionsList = function() {
  this.setCollectionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_db_api.Collection.repeatedFields_, null);
};
goog.inherits(proto.sc_db_api.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.Collection.displayName = 'proto.sc_db_api.Collection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_db_api.Collection.repeatedFields_ = [14,15,16,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.Collection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {
    dbid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dbname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    schema: jspb.Message.getFieldWithDefault(msg, 3, ""),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 5, ""),
    selfreferencingcolumnname: jspb.Message.getFieldWithDefault(msg, 6, ""),
    referencegeneration: jspb.Message.getFieldWithDefault(msg, 7, ""),
    userdefinedtypecatalog: jspb.Message.getFieldWithDefault(msg, 8, ""),
    userdefinedtypeschema: jspb.Message.getFieldWithDefault(msg, 9, ""),
    userdefinedtypename: jspb.Message.getFieldWithDefault(msg, 10, ""),
    isinsertableinto: jspb.Message.getFieldWithDefault(msg, 11, ""),
    istyped: jspb.Message.getFieldWithDefault(msg, 12, ""),
    commitaction: jspb.Message.getFieldWithDefault(msg, 13, ""),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.sc_db_api.Column.toObject, includeInstance),
    primarykeyList: jspb.Message.getRepeatedField(msg, 15),
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.sc_db_api.Index.toObject, includeInstance),
    foreignkeysList: jspb.Message.toObjectList(msg.getForeignkeysList(),
    proto.sc_db_api.ForeignKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.Collection}
 */
proto.sc_db_api.Collection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.Collection;
  return proto.sc_db_api.Collection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.Collection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.Collection}
 */
proto.sc_db_api.Collection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSchema(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelfreferencingcolumnname(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferencegeneration(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserdefinedtypecatalog(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserdefinedtypeschema(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserdefinedtypename(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsinsertableinto(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setIstyped(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitaction(value);
      break;
    case 14:
      var value = new proto.sc_db_api.Column;
      reader.readMessage(value,proto.sc_db_api.Column.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addPrimarykey(value);
      break;
    case 16:
      var value = new proto.sc_db_api.Index;
      reader.readMessage(value,proto.sc_db_api.Index.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    case 17:
      var value = new proto.sc_db_api.ForeignKey;
      reader.readMessage(value,proto.sc_db_api.ForeignKey.deserializeBinaryFromReader);
      msg.addForeignkeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.Collection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.Collection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.Collection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.Collection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDbid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSchema();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSelfreferencingcolumnname();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReferencegeneration();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUserdefinedtypecatalog();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUserdefinedtypeschema();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUserdefinedtypename();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIsinsertableinto();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIstyped();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCommitaction();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.sc_db_api.Column.serializeBinaryToWriter
    );
  }
  f = message.getPrimarykeyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.sc_db_api.Index.serializeBinaryToWriter
    );
  }
  f = message.getForeignkeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.sc_db_api.ForeignKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string dbId = 1;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getDbid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setDbid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dbName = 2;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setDbname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string schema = 3;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getSchema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setSchema = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string type = 5;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string selfReferencingColumnName = 6;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getSelfreferencingcolumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setSelfreferencingcolumnname = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string referenceGeneration = 7;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getReferencegeneration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setReferencegeneration = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string userDefinedTypeCatalog = 8;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getUserdefinedtypecatalog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setUserdefinedtypecatalog = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string userDefinedTypeSchema = 9;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getUserdefinedtypeschema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setUserdefinedtypeschema = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string userDefinedTypeName = 10;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getUserdefinedtypename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setUserdefinedtypename = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string isInsertableInto = 11;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getIsinsertableinto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setIsinsertableinto = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string isTyped = 12;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getIstyped = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setIstyped = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string commitAction = 13;
 * @return {string}
 */
proto.sc_db_api.Collection.prototype.getCommitaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.sc_db_api.Collection.prototype.setCommitaction = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * repeated Column columns = 14;
 * @return {!Array<!proto.sc_db_api.Column>}
 */
proto.sc_db_api.Collection.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.sc_db_api.Column>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_db_api.Column, 14));
};


/** @param {!Array<!proto.sc_db_api.Column>} value */
proto.sc_db_api.Collection.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.sc_db_api.Column=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_db_api.Column}
 */
proto.sc_db_api.Collection.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.sc_db_api.Column, opt_index);
};


proto.sc_db_api.Collection.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * repeated string primaryKey = 15;
 * @return {!Array<string>}
 */
proto.sc_db_api.Collection.prototype.getPrimarykeyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/** @param {!Array<string>} value */
proto.sc_db_api.Collection.prototype.setPrimarykeyList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.sc_db_api.Collection.prototype.addPrimarykey = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


proto.sc_db_api.Collection.prototype.clearPrimarykeyList = function() {
  this.setPrimarykeyList([]);
};


/**
 * repeated Index indexes = 16;
 * @return {!Array<!proto.sc_db_api.Index>}
 */
proto.sc_db_api.Collection.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.sc_db_api.Index>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_db_api.Index, 16));
};


/** @param {!Array<!proto.sc_db_api.Index>} value */
proto.sc_db_api.Collection.prototype.setIndexesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.sc_db_api.Index=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_db_api.Index}
 */
proto.sc_db_api.Collection.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.sc_db_api.Index, opt_index);
};


proto.sc_db_api.Collection.prototype.clearIndexesList = function() {
  this.setIndexesList([]);
};


/**
 * repeated ForeignKey foreignKeys = 17;
 * @return {!Array<!proto.sc_db_api.ForeignKey>}
 */
proto.sc_db_api.Collection.prototype.getForeignkeysList = function() {
  return /** @type{!Array<!proto.sc_db_api.ForeignKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_db_api.ForeignKey, 17));
};


/** @param {!Array<!proto.sc_db_api.ForeignKey>} value */
proto.sc_db_api.Collection.prototype.setForeignkeysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.sc_db_api.ForeignKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_db_api.ForeignKey}
 */
proto.sc_db_api.Collection.prototype.addForeignkeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.sc_db_api.ForeignKey, opt_index);
};


proto.sc_db_api.Collection.prototype.clearForeignkeysList = function() {
  this.setForeignkeysList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_db_api.Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.Column.displayName = 'proto.sc_db_api.Column';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.Column.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ordinalposition: jspb.Message.getFieldWithDefault(msg, 2, 0),
    columndefault: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isnullable: jspb.Message.getFieldWithDefault(msg, 4, ""),
    datatype: jspb.Message.getFieldWithDefault(msg, 5, ""),
    charactermaximumlength: jspb.Message.getFieldWithDefault(msg, 6, 0),
    characteroctetlength: jspb.Message.getFieldWithDefault(msg, 7, 0),
    numericprecision: jspb.Message.getFieldWithDefault(msg, 8, 0),
    numericprecisionradix: jspb.Message.getFieldWithDefault(msg, 9, 0),
    numericscale: jspb.Message.getFieldWithDefault(msg, 10, 0),
    charactersetname: jspb.Message.getFieldWithDefault(msg, 11, ""),
    collationname: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.Column}
 */
proto.sc_db_api.Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.Column;
  return proto.sc_db_api.Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.Column}
 */
proto.sc_db_api.Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumnname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrdinalposition(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumndefault(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsnullable(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatatype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharactermaximumlength(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCharacteroctetlength(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumericprecision(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumericprecisionradix(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumericscale(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharactersetname(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollationname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrdinalposition();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getColumndefault();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsnullable();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDatatype();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCharactermaximumlength();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCharacteroctetlength();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getNumericprecision();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getNumericprecisionradix();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getNumericscale();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getCharactersetname();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCollationname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string columnName = 1;
 * @return {string}
 */
proto.sc_db_api.Column.prototype.getColumnname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_db_api.Column.prototype.setColumnname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 ordinalPosition = 2;
 * @return {number}
 */
proto.sc_db_api.Column.prototype.getOrdinalposition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.sc_db_api.Column.prototype.setOrdinalposition = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string columnDefault = 3;
 * @return {string}
 */
proto.sc_db_api.Column.prototype.getColumndefault = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sc_db_api.Column.prototype.setColumndefault = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string isNullable = 4;
 * @return {string}
 */
proto.sc_db_api.Column.prototype.getIsnullable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sc_db_api.Column.prototype.setIsnullable = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string dataType = 5;
 * @return {string}
 */
proto.sc_db_api.Column.prototype.getDatatype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sc_db_api.Column.prototype.setDatatype = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 characterMaximumLength = 6;
 * @return {number}
 */
proto.sc_db_api.Column.prototype.getCharactermaximumlength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.sc_db_api.Column.prototype.setCharactermaximumlength = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 characterOctetLength = 7;
 * @return {number}
 */
proto.sc_db_api.Column.prototype.getCharacteroctetlength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.sc_db_api.Column.prototype.setCharacteroctetlength = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 numericPrecision = 8;
 * @return {number}
 */
proto.sc_db_api.Column.prototype.getNumericprecision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.sc_db_api.Column.prototype.setNumericprecision = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 numericPrecisionRadix = 9;
 * @return {number}
 */
proto.sc_db_api.Column.prototype.getNumericprecisionradix = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.sc_db_api.Column.prototype.setNumericprecisionradix = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 numericScale = 10;
 * @return {number}
 */
proto.sc_db_api.Column.prototype.getNumericscale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.sc_db_api.Column.prototype.setNumericscale = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string characterSetName = 11;
 * @return {string}
 */
proto.sc_db_api.Column.prototype.getCharactersetname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.sc_db_api.Column.prototype.setCharactersetname = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string collationName = 12;
 * @return {string}
 */
proto.sc_db_api.Column.prototype.getCollationname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.sc_db_api.Column.prototype.setCollationname = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_db_api.Index.repeatedFields_, null);
};
goog.inherits(proto.sc_db_api.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.Index.displayName = 'proto.sc_db_api.Index';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_db_api.Index.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    columnsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.Index}
 */
proto.sc_db_api.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.Index;
  return proto.sc_db_api.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.Index}
 */
proto.sc_db_api.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.sc_db_api.Index.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sc_db_api.Index.Type = {
  UNKNOWN: 0,
  PRIMARY: 1,
  UNIQUE: 2,
  SECONDARY: 3
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.sc_db_api.Index.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_db_api.Index.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.sc_db_api.Index.Type}
 */
proto.sc_db_api.Index.prototype.getType = function() {
  return /** @type {!proto.sc_db_api.Index.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.sc_db_api.Index.Type} value */
proto.sc_db_api.Index.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated string columns = 3;
 * @return {!Array<string>}
 */
proto.sc_db_api.Index.prototype.getColumnsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.sc_db_api.Index.prototype.setColumnsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.sc_db_api.Index.prototype.addColumns = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.sc_db_api.Index.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.ForeignKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_db_api.ForeignKey.repeatedFields_, null);
};
goog.inherits(proto.sc_db_api.ForeignKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.ForeignKey.displayName = 'proto.sc_db_api.ForeignKey';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_db_api.ForeignKey.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.ForeignKey.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.ForeignKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.ForeignKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.ForeignKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    updaterule: jspb.Message.getFieldWithDefault(msg, 2, ""),
    deleterule: jspb.Message.getFieldWithDefault(msg, 3, ""),
    referencesschema: jspb.Message.getFieldWithDefault(msg, 4, ""),
    referencestable: jspb.Message.getFieldWithDefault(msg, 5, ""),
    keycolumnsList: jspb.Message.getRepeatedField(msg, 6),
    referencescolumnsList: jspb.Message.getRepeatedField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.ForeignKey}
 */
proto.sc_db_api.ForeignKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.ForeignKey;
  return proto.sc_db_api.ForeignKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.ForeignKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.ForeignKey}
 */
proto.sc_db_api.ForeignKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdaterule(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeleterule(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferencesschema(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReferencestable(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeycolumns(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addReferencescolumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.ForeignKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.ForeignKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.ForeignKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.ForeignKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpdaterule();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDeleterule();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReferencesschema();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReferencestable();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getKeycolumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getReferencescolumnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.sc_db_api.ForeignKey.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_db_api.ForeignKey.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string UpdateRule = 2;
 * @return {string}
 */
proto.sc_db_api.ForeignKey.prototype.getUpdaterule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_db_api.ForeignKey.prototype.setUpdaterule = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string DeleteRule = 3;
 * @return {string}
 */
proto.sc_db_api.ForeignKey.prototype.getDeleterule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.sc_db_api.ForeignKey.prototype.setDeleterule = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ReferencesSchema = 4;
 * @return {string}
 */
proto.sc_db_api.ForeignKey.prototype.getReferencesschema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.sc_db_api.ForeignKey.prototype.setReferencesschema = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ReferencesTable = 5;
 * @return {string}
 */
proto.sc_db_api.ForeignKey.prototype.getReferencestable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sc_db_api.ForeignKey.prototype.setReferencestable = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string KeyColumns = 6;
 * @return {!Array<string>}
 */
proto.sc_db_api.ForeignKey.prototype.getKeycolumnsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.sc_db_api.ForeignKey.prototype.setKeycolumnsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.sc_db_api.ForeignKey.prototype.addKeycolumns = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.sc_db_api.ForeignKey.prototype.clearKeycolumnsList = function() {
  this.setKeycolumnsList([]);
};


/**
 * repeated string ReferencesColumns = 7;
 * @return {!Array<string>}
 */
proto.sc_db_api.ForeignKey.prototype.getReferencescolumnsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.sc_db_api.ForeignKey.prototype.setReferencescolumnsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.sc_db_api.ForeignKey.prototype.addReferencescolumns = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.sc_db_api.ForeignKey.prototype.clearReferencescolumnsList = function() {
  this.setReferencescolumnsList([]);
};


goog.object.extend(exports, proto.sc_db_api);
