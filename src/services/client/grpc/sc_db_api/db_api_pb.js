/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

// require('../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var sc_db_api_common_pb = require('../sc_db_api/common_pb.js');
goog.exportSymbol('proto.sc_db_api.ByIdRequest', null, global);
goog.exportSymbol('proto.sc_db_api.GetListRequest', null, global);
goog.exportSymbol('proto.sc_db_api.GetListResponse', null, global);
goog.exportSymbol('proto.sc_db_api.InsertRequest', null, global);
goog.exportSymbol('proto.sc_db_api.OrderField', null, global);
goog.exportSymbol('proto.sc_db_api.SingleRecord', null, global);
goog.exportSymbol('proto.sc_db_api.SingleRecordResponse', null, global);
goog.exportSymbol('proto.sc_db_api.UpdateRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.ByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_db_api.ByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.ByIdRequest.displayName = 'proto.sc_db_api.ByIdRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.ByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.ByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.ByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.ByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    db: (f = msg.getDb()) && sc_db_api_common_pb.DatabaseRequest.toObject(includeInstance, f),
    collection: jspb.Message.getFieldWithDefault(msg, 2, ""),
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.ByIdRequest}
 */
proto.sc_db_api.ByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.ByIdRequest;
  return proto.sc_db_api.ByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.ByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.ByIdRequest}
 */
proto.sc_db_api.ByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new sc_db_api_common_pb.DatabaseRequest;
      reader.readMessage(value,sc_db_api_common_pb.DatabaseRequest.deserializeBinaryFromReader);
      msg.setDb(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.ByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.ByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.ByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.ByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDb();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      sc_db_api_common_pb.DatabaseRequest.serializeBinaryToWriter
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional DatabaseRequest Db = 1;
 * @return {?proto.sc_db_api.DatabaseRequest}
 */
proto.sc_db_api.ByIdRequest.prototype.getDb = function() {
  return /** @type{?proto.sc_db_api.DatabaseRequest} */ (
    jspb.Message.getWrapperField(this, sc_db_api_common_pb.DatabaseRequest, 1));
};


/** @param {?proto.sc_db_api.DatabaseRequest|undefined} value */
proto.sc_db_api.ByIdRequest.prototype.setDb = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.sc_db_api.ByIdRequest.prototype.clearDb = function() {
  this.setDb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_db_api.ByIdRequest.prototype.hasDb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.sc_db_api.ByIdRequest.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_db_api.ByIdRequest.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.sc_db_api.ByIdRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes key = 3;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.sc_db_api.ByIdRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.sc_db_api.ByIdRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.sc_db_api.ByIdRequest.prototype.setKey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.SingleRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_db_api.SingleRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.SingleRecord.displayName = 'proto.sc_db_api.SingleRecord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.SingleRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.SingleRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.SingleRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.SingleRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.SingleRecord}
 */
proto.sc_db_api.SingleRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.SingleRecord;
  return proto.sc_db_api.SingleRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.SingleRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.SingleRecord}
 */
proto.sc_db_api.SingleRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.SingleRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.SingleRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.SingleRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.SingleRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes body = 1;
 * @return {!(string|Uint8Array)}
 */
proto.sc_db_api.SingleRecord.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.sc_db_api.SingleRecord.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.sc_db_api.SingleRecord.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.sc_db_api.SingleRecord.prototype.setBody = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.SingleRecordResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_db_api.SingleRecordResponse.repeatedFields_, null);
};
goog.inherits(proto.sc_db_api.SingleRecordResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.SingleRecordResponse.displayName = 'proto.sc_db_api.SingleRecordResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_db_api.SingleRecordResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.SingleRecordResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.SingleRecordResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.SingleRecordResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.SingleRecordResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyList: jspb.Message.getRepeatedField(msg, 1),
    data: (f = msg.getData()) && proto.sc_db_api.SingleRecord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.SingleRecordResponse}
 */
proto.sc_db_api.SingleRecordResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.SingleRecordResponse;
  return proto.sc_db_api.SingleRecordResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.SingleRecordResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.SingleRecordResponse}
 */
proto.sc_db_api.SingleRecordResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addKey(value);
      break;
    case 2:
      var value = new proto.sc_db_api.SingleRecord;
      reader.readMessage(value,proto.sc_db_api.SingleRecord.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.SingleRecordResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.SingleRecordResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.SingleRecordResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.SingleRecordResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sc_db_api.SingleRecord.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string key = 1;
 * @return {!Array<string>}
 */
proto.sc_db_api.SingleRecordResponse.prototype.getKeyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.sc_db_api.SingleRecordResponse.prototype.setKeyList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.sc_db_api.SingleRecordResponse.prototype.addKey = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.sc_db_api.SingleRecordResponse.prototype.clearKeyList = function() {
  this.setKeyList([]);
};


/**
 * optional SingleRecord data = 2;
 * @return {?proto.sc_db_api.SingleRecord}
 */
proto.sc_db_api.SingleRecordResponse.prototype.getData = function() {
  return /** @type{?proto.sc_db_api.SingleRecord} */ (
    jspb.Message.getWrapperField(this, proto.sc_db_api.SingleRecord, 2));
};


/** @param {?proto.sc_db_api.SingleRecord|undefined} value */
proto.sc_db_api.SingleRecordResponse.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.sc_db_api.SingleRecordResponse.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_db_api.SingleRecordResponse.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.OrderField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_db_api.OrderField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.OrderField.displayName = 'proto.sc_db_api.OrderField';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.OrderField.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.OrderField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.OrderField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.OrderField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.OrderField}
 */
proto.sc_db_api.OrderField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.OrderField;
  return proto.sc_db_api.OrderField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.OrderField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.OrderField}
 */
proto.sc_db_api.OrderField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.OrderField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.OrderField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.OrderField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.OrderField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDesc();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sc_db_api.OrderField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sc_db_api.OrderField.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool desc = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_db_api.OrderField.prototype.getDesc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.sc_db_api.OrderField.prototype.setDesc = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.GetListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_db_api.GetListRequest.repeatedFields_, null);
};
goog.inherits(proto.sc_db_api.GetListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.GetListRequest.displayName = 'proto.sc_db_api.GetListRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_db_api.GetListRequest.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.GetListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.GetListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.GetListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.GetListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    db: (f = msg.getDb()) && sc_db_api_common_pb.DatabaseRequest.toObject(includeInstance, f),
    collection: jspb.Message.getFieldWithDefault(msg, 2, ""),
    from: jspb.Message.getFieldWithDefault(msg, 3, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    calctotal: jspb.Message.getFieldWithDefault(msg, 5, false),
    filter: (f = msg.getFilter()) && proto.sc_db_api.SingleRecord.toObject(includeInstance, f),
    orderList: jspb.Message.toObjectList(msg.getOrderList(),
    proto.sc_db_api.OrderField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.GetListRequest}
 */
proto.sc_db_api.GetListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.GetListRequest;
  return proto.sc_db_api.GetListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.GetListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.GetListRequest}
 */
proto.sc_db_api.GetListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new sc_db_api_common_pb.DatabaseRequest;
      reader.readMessage(value,sc_db_api_common_pb.DatabaseRequest.deserializeBinaryFromReader);
      msg.setDb(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrom(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCalctotal(value);
      break;
    case 6:
      var value = new proto.sc_db_api.SingleRecord;
      reader.readMessage(value,proto.sc_db_api.SingleRecord.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 7:
      var value = new proto.sc_db_api.OrderField;
      reader.readMessage(value,proto.sc_db_api.OrderField.deserializeBinaryFromReader);
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.GetListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.GetListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.GetListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.GetListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDb();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      sc_db_api_common_pb.DatabaseRequest.serializeBinaryToWriter
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFrom();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getCalctotal();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.sc_db_api.SingleRecord.serializeBinaryToWriter
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.sc_db_api.OrderField.serializeBinaryToWriter
    );
  }
};


/**
 * optional DatabaseRequest Db = 1;
 * @return {?proto.sc_db_api.DatabaseRequest}
 */
proto.sc_db_api.GetListRequest.prototype.getDb = function() {
  return /** @type{?proto.sc_db_api.DatabaseRequest} */ (
    jspb.Message.getWrapperField(this, sc_db_api_common_pb.DatabaseRequest, 1));
};


/** @param {?proto.sc_db_api.DatabaseRequest|undefined} value */
proto.sc_db_api.GetListRequest.prototype.setDb = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.sc_db_api.GetListRequest.prototype.clearDb = function() {
  this.setDb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_db_api.GetListRequest.prototype.hasDb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.sc_db_api.GetListRequest.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_db_api.GetListRequest.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 from = 3;
 * @return {number}
 */
proto.sc_db_api.GetListRequest.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.sc_db_api.GetListRequest.prototype.setFrom = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 limit = 4;
 * @return {number}
 */
proto.sc_db_api.GetListRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_db_api.GetListRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool calcTotal = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.sc_db_api.GetListRequest.prototype.getCalctotal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.sc_db_api.GetListRequest.prototype.setCalctotal = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional SingleRecord filter = 6;
 * @return {?proto.sc_db_api.SingleRecord}
 */
proto.sc_db_api.GetListRequest.prototype.getFilter = function() {
  return /** @type{?proto.sc_db_api.SingleRecord} */ (
    jspb.Message.getWrapperField(this, proto.sc_db_api.SingleRecord, 6));
};


/** @param {?proto.sc_db_api.SingleRecord|undefined} value */
proto.sc_db_api.GetListRequest.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.sc_db_api.GetListRequest.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_db_api.GetListRequest.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated OrderField order = 7;
 * @return {!Array<!proto.sc_db_api.OrderField>}
 */
proto.sc_db_api.GetListRequest.prototype.getOrderList = function() {
  return /** @type{!Array<!proto.sc_db_api.OrderField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sc_db_api.OrderField, 7));
};


/** @param {!Array<!proto.sc_db_api.OrderField>} value */
proto.sc_db_api.GetListRequest.prototype.setOrderList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.sc_db_api.OrderField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sc_db_api.OrderField}
 */
proto.sc_db_api.GetListRequest.prototype.addOrder = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.sc_db_api.OrderField, opt_index);
};


proto.sc_db_api.GetListRequest.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.GetListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sc_db_api.GetListResponse.repeatedFields_, null);
};
goog.inherits(proto.sc_db_api.GetListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.GetListResponse.displayName = 'proto.sc_db_api.GetListResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sc_db_api.GetListResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.GetListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.GetListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.GetListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.GetListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    items: msg.getItems_asB64(),
    keyList: jspb.Message.getRepeatedField(msg, 3),
    from: jspb.Message.getFieldWithDefault(msg, 4, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.GetListResponse}
 */
proto.sc_db_api.GetListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.GetListResponse;
  return proto.sc_db_api.GetListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.GetListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.GetListResponse}
 */
proto.sc_db_api.GetListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setItems(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrom(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.GetListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.GetListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.GetListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.GetListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getItems_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getKeyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getFrom();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 total = 1;
 * @return {number}
 */
proto.sc_db_api.GetListResponse.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.sc_db_api.GetListResponse.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes items = 2;
 * @return {!(string|Uint8Array)}
 */
proto.sc_db_api.GetListResponse.prototype.getItems = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes items = 2;
 * This is a type-conversion wrapper around `getItems()`
 * @return {string}
 */
proto.sc_db_api.GetListResponse.prototype.getItems_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getItems()));
};


/**
 * optional bytes items = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getItems()`
 * @return {!Uint8Array}
 */
proto.sc_db_api.GetListResponse.prototype.getItems_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getItems()));
};


/** @param {!(string|Uint8Array)} value */
proto.sc_db_api.GetListResponse.prototype.setItems = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated string key = 3;
 * @return {!Array<string>}
 */
proto.sc_db_api.GetListResponse.prototype.getKeyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.sc_db_api.GetListResponse.prototype.setKeyList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.sc_db_api.GetListResponse.prototype.addKey = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.sc_db_api.GetListResponse.prototype.clearKeyList = function() {
  this.setKeyList([]);
};


/**
 * optional uint64 from = 4;
 * @return {number}
 */
proto.sc_db_api.GetListResponse.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.sc_db_api.GetListResponse.prototype.setFrom = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 limit = 5;
 * @return {number}
 */
proto.sc_db_api.GetListResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.sc_db_api.GetListResponse.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.UpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_db_api.UpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.UpdateRequest.displayName = 'proto.sc_db_api.UpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.UpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.UpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.UpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.UpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    db: (f = msg.getDb()) && sc_db_api_common_pb.DatabaseRequest.toObject(includeInstance, f),
    collection: jspb.Message.getFieldWithDefault(msg, 2, ""),
    key: msg.getKey_asB64(),
    item: (f = msg.getItem()) && proto.sc_db_api.SingleRecord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.UpdateRequest}
 */
proto.sc_db_api.UpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.UpdateRequest;
  return proto.sc_db_api.UpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.UpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.UpdateRequest}
 */
proto.sc_db_api.UpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new sc_db_api_common_pb.DatabaseRequest;
      reader.readMessage(value,sc_db_api_common_pb.DatabaseRequest.deserializeBinaryFromReader);
      msg.setDb(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 4:
      var value = new proto.sc_db_api.SingleRecord;
      reader.readMessage(value,proto.sc_db_api.SingleRecord.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.UpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.UpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.UpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.UpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDb();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      sc_db_api_common_pb.DatabaseRequest.serializeBinaryToWriter
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sc_db_api.SingleRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional DatabaseRequest Db = 1;
 * @return {?proto.sc_db_api.DatabaseRequest}
 */
proto.sc_db_api.UpdateRequest.prototype.getDb = function() {
  return /** @type{?proto.sc_db_api.DatabaseRequest} */ (
    jspb.Message.getWrapperField(this, sc_db_api_common_pb.DatabaseRequest, 1));
};


/** @param {?proto.sc_db_api.DatabaseRequest|undefined} value */
proto.sc_db_api.UpdateRequest.prototype.setDb = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.sc_db_api.UpdateRequest.prototype.clearDb = function() {
  this.setDb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_db_api.UpdateRequest.prototype.hasDb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.sc_db_api.UpdateRequest.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_db_api.UpdateRequest.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.sc_db_api.UpdateRequest.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes key = 3;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.sc_db_api.UpdateRequest.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.sc_db_api.UpdateRequest.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.sc_db_api.UpdateRequest.prototype.setKey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional SingleRecord item = 4;
 * @return {?proto.sc_db_api.SingleRecord}
 */
proto.sc_db_api.UpdateRequest.prototype.getItem = function() {
  return /** @type{?proto.sc_db_api.SingleRecord} */ (
    jspb.Message.getWrapperField(this, proto.sc_db_api.SingleRecord, 4));
};


/** @param {?proto.sc_db_api.SingleRecord|undefined} value */
proto.sc_db_api.UpdateRequest.prototype.setItem = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.sc_db_api.UpdateRequest.prototype.clearItem = function() {
  this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_db_api.UpdateRequest.prototype.hasItem = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sc_db_api.InsertRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sc_db_api.InsertRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sc_db_api.InsertRequest.displayName = 'proto.sc_db_api.InsertRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sc_db_api.InsertRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sc_db_api.InsertRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sc_db_api.InsertRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.InsertRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    db: (f = msg.getDb()) && sc_db_api_common_pb.DatabaseRequest.toObject(includeInstance, f),
    collection: jspb.Message.getFieldWithDefault(msg, 2, ""),
    item: (f = msg.getItem()) && proto.sc_db_api.SingleRecord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sc_db_api.InsertRequest}
 */
proto.sc_db_api.InsertRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sc_db_api.InsertRequest;
  return proto.sc_db_api.InsertRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sc_db_api.InsertRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sc_db_api.InsertRequest}
 */
proto.sc_db_api.InsertRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new sc_db_api_common_pb.DatabaseRequest;
      reader.readMessage(value,sc_db_api_common_pb.DatabaseRequest.deserializeBinaryFromReader);
      msg.setDb(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 3:
      var value = new proto.sc_db_api.SingleRecord;
      reader.readMessage(value,proto.sc_db_api.SingleRecord.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sc_db_api.InsertRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sc_db_api.InsertRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sc_db_api.InsertRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sc_db_api.InsertRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDb();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      sc_db_api_common_pb.DatabaseRequest.serializeBinaryToWriter
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sc_db_api.SingleRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional DatabaseRequest Db = 1;
 * @return {?proto.sc_db_api.DatabaseRequest}
 */
proto.sc_db_api.InsertRequest.prototype.getDb = function() {
  return /** @type{?proto.sc_db_api.DatabaseRequest} */ (
    jspb.Message.getWrapperField(this, sc_db_api_common_pb.DatabaseRequest, 1));
};


/** @param {?proto.sc_db_api.DatabaseRequest|undefined} value */
proto.sc_db_api.InsertRequest.prototype.setDb = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.sc_db_api.InsertRequest.prototype.clearDb = function() {
  this.setDb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_db_api.InsertRequest.prototype.hasDb = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string collection = 2;
 * @return {string}
 */
proto.sc_db_api.InsertRequest.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sc_db_api.InsertRequest.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SingleRecord item = 3;
 * @return {?proto.sc_db_api.SingleRecord}
 */
proto.sc_db_api.InsertRequest.prototype.getItem = function() {
  return /** @type{?proto.sc_db_api.SingleRecord} */ (
    jspb.Message.getWrapperField(this, proto.sc_db_api.SingleRecord, 3));
};


/** @param {?proto.sc_db_api.SingleRecord|undefined} value */
proto.sc_db_api.InsertRequest.prototype.setItem = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.sc_db_api.InsertRequest.prototype.clearItem = function() {
  this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sc_db_api.InsertRequest.prototype.hasItem = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.sc_db_api);
